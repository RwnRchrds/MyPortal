@model MyPortalCore.Areas.Staff.ViewModels.Home.HomepageViewModel
@{
    ViewBag.Title = "Home";
}

<!--begin::Subheader-->
<div class="subheader py-2 py-lg-4 subheader-solid" id="kt_subheader">
    <div class="container-fluid d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
        <!--begin::Info-->
        <div class="d-flex align-items-center flex-wrap mr-2">
            <!--begin::Page Title-->
            <h5 class="text-dark font-weight-bold mt-2 mb-2 mr-5"><i class="fas fa-home mr-2"></i>Home</h5>
            <!--end::Page Title-->
            
        </div>
        <!--end::Info-->
        
    </div>
</div>
<!--end::Subheader-->

<!--begin::Entry-->
<div class="d-flex flex-column-fluid">
    <!--begin::Container-->
    <div class="container">
        <!--begin::Dashboard-->
        <!--begin::Row-->
        <div class="row">
        <div class="col-lg-6 col-xxl-4">
            <!--begin::Mixed Widget 1-->
            <div class="card card-custom card-stretch gutter-b">
                <!--begin::Header-->
                <div class="card-header bg-primary border-0 py-5">
                    <h3 class="card-title font-weight-bolder text-white">School Insights</h3>
                </div>
                <!--end::Header-->
                <!--begin::Body-->
                <div class="card-body p-0">
                    <!--begin::Stats-->
                    <div class="card-spacer">
                        <!--begin::Row-->
                        <div class="row m-0">
                            <div class="col bg-info px-6 py-8 rounded-xl mr-7 mb-7">
                                <span class="svg-icon svg-icon-3x svg-icon-warning d-block my-2">
                                    <i class="fad fa-clipboard-check fa-fw fa-3x text-white"></i>
                                </span>
                                <a href="#" class="text-white font-weight-bold font-size-h6">Assessment</a>
                            </div>
                            <div class="col bg-warning px-6 py-8 rounded-xl mb-7">
                                <span class="svg-icon svg-icon-3x svg-icon-primary d-block my-2">
                                    <i class="fad fa-fw fa-stopwatch fa-3x text-white"></i>
                                </span>
                                <a href="#" class="text-white font-weight-bold font-size-h6 mt-2">Attendance</a>
                            </div>
                        </div>
                        <!--end::Row-->
                        <!--begin::Row-->
                        <div class="row m-0">
                            <div class="col bg-danger px-6 py-8 rounded-xl mr-7">
                                <span class="svg-icon svg-icon-3x svg-icon-danger d-block my-2">
                                    <i class="fad fa-star fa-fw fa-3x text-white"></i>
                                </span>
                                <a href="#" class="text-white font-weight-bold font-size-h6 mt-2">Behaviour</a>
                            </div>
                            <div class="col bg-success px-6 py-8 rounded-xl">
                                <span class="svg-icon svg-icon-3x svg-icon-success d-block my-2">
                                    <i class="fad fa-fw fa-chart-bar fa-3x text-white"></i>
                                </span>
                                <a href="#" class="text-white font-weight-bold font-size-h6 mt-2">Reports</a>
                            </div>
                        </div>
                        <!--end::Row-->
                    </div>
                    <!--end::Stats-->
                </div>
                <!--end::Body-->
            </div>
            <!--end::Mixed Widget 1-->
        </div>
        @if (Model.Person != null)
        {
         <div class="col-lg-6 col-xxl-4">
                <!--begin::List Widget 9-->
                <div class="card card-custom card-stretch gutter-b">
                    <!--begin::Header-->
                    <div class="card-header align-items-center border-0 mt-4">
                        <h3 class="card-title align-items-start flex-column">
                            <span class="font-weight-bolder text-dark">My Tasks</span>
                        </h3>
                        <div class="card-toolbar">
                                                        <button class="btn btn-light-primary font-weight-bolder" id="new_task_button">
                                                            <span class="svg-icon svg-icon-md">
                                                                <i class="fas fa-plus"></i>
                                                            </span>Add Task
                                                        </button>
                                                    </div>
                    </div>
                    <!--end::Header-->
                    <!--begin::Body-->
                    <div class="card-body pt-2">
                        @if (Model.Tasks.Any())
                        {
                            <!--begin::Item-->
                            @foreach (var task in Model.Tasks)
                            {
                                <div class="d-flex align-items-center mb-10">
                                    <!--begin::Bullet-->
                                    <span class="bullet bullet-bar align-self-stretch" style="background-color: @task.TaskTypeColourCode"></span>
                                    <!--end::Bullet-->
                                    <!--begin::Checkbox-->
                                    <label class="checkbox checkbox-lg @(task.Overdue ? "checkbox-light-danger" : "") checkbox-inline flex-shrink-0 m-0 mx-4">
                                        <input type="checkbox" name="select" onclick="return false;" @if (task.Completed) { <text> checked="checked" </text> }>
                                        <span></span>
                                    </label>
                                    <!--end::Checkbox-->
                                    <!--begin::Text-->
                                    <div class="d-flex flex-column flex-grow-1">
                                        <div class="mb-1">
                                            <a href="#" class="text-dark-75 text-hover-primary font-weight-bold font-size-lg mb-1">@task.Title</a>
                                        </div>
                                        @if (!string.IsNullOrWhiteSpace(task.AssignedByName))
                                        {
                                            <div class="mb-1">
                                                <span class="text-muted font-weight-bold">@($"{task.AssignedByName}")</span>
                                            </div>
                                        }
                                        @if (task.DueDate != null)
                                        {
                                            <div class="mb-1">
                                                <span class="text-muted font-weight-bold">@($"{task.DueDate.Value.ToString("d")}")</span>
                                            </div>
                                        }
                                        <div class="mt-1">
                                            <span class="label label-pill label-inline mx-2" style="background-color: @task.TaskTypeColourCode; color: white;">@task.TaskTypeName</span>
                                            @if (task.Overdue)
                                            {
                                                <span class="label label-danger label-pill label-inline">Overdue</span>
                                            }
                                        </div>
                                    </div>
                                    <!--end::Text-->
                                    @if (task.CanEdit)
                                    {
                                        <div class="dropdown ml-2">
                                            <a href="#" class="btn btn-hover-light-primary btn-sm btn-icon" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                <i class="ki ki-more-hor font-size-lg text-primary"></i>
                                            </a>
                                            <div class="dropdown-menu dropdown-menu-md dropdown-menu-right" style="">
                                                <!--begin::Navigation-->
                                                <ul class="navi navi-hover py-5">
                                                    <li class="navi-item">
                                                        <a href="javascript:toggleTaskCompleted('@task.Id')" class="navi-link">
                                                            <span class="navi-icon"><i class="fas fa-fw fa-check-circle"></i></span>
                                                            <span class="navi-text">Toggle Completed</span>
                                                        </a>
                                                    </li>
                                                    <li class="navi-item">
                                                        <a href="javascript:openTaskForm(true, '@task.Id')" class="navi-link">
                                                            <span class="navi-icon"><i class="fas fa-fw fa-edit"></i></span>
                                                            <span class="navi-text">Edit</span>
                                                        </a>
                                                    </li>
                                                    <li class="navi-item">
                                                        <a href="javascript:deleteTask('@task.Id')" class="navi-link">
                                                            <span class="navi-icon"><i class="fas fa-fw fa-trash-alt"></i></span>
                                                            <span class="navi-text">Delete</span>
                                                        </a>
                                                    </li>
                                                </ul>
                                                <!--end::Navigation-->
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            <!--end:Item-->
                        }
                        else
                        {
                            <p class="text-muted font-weight-bold px-3">No active tasks</p>
                        }
                    </div>
                    <!--end: Card Body-->
                </div>
                <!--end: Card-->
                <!--end: List Widget 9-->
            </div>   
        }
        </div>
        <!--end::Row-->
    <!--end::Dashboard-->
    </div>
    <!--end::Container-->
</div>
<!--end::Entry-->

<div class="modal fade" id="task_modal" tabindex="-1" role="dialog" aria-labelledby="task_modal" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="task_modal_title"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i aria-hidden="true" class="ki ki-close"></i>
                </button>
            </div>
            <form id="task_form">
                <div class="modal-body">
                    <div class="form-group">
                        <label for="task_type">Task Type</label>
                        <select asp-for="Task.TypeId" asp-items="Model.TaskTypes" name="TypeId" class="form-control" id="task_type"></select>
                        @Html.ValidationMessageFor(x => x.Task.TypeId, null, new { data_valmsg_for = "TypeId", @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label for="task_title">Title</label>
                        <input type="text" asp-for="Task.Title" class="form-control" id="task_title" name="Title" />
                        @Html.ValidationMessageFor(x => x.Task.Title, null, new { data_valmsg_for = "Title", @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label for="task_description">Description</label>
                        <textarea asp-for="Task.Description" class="form-control" id="task_description" name="Description" rows="7"></textarea>
                        @Html.ValidationMessageFor(x => x.Task.Description, null, new { data_valmsg_for = "Description", @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label for="task_duedate">Due Date</label>
                        <input type="datetime-local" asp-for="Task.DueDate" class="form-control" id="task_duedate" name="DueDate" />
                        @Html.ValidationMessageFor(x => x.Task.Title, null, new { data_valmsg_for = "DueDate", @class = "text-danger" })
                    </div>
                    <input type="hidden" name="AssignedToId" id="task_assignedToId" />
                    <input type="hidden" name="Id" id="task_id" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light-primary font-weight-bold" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary font-weight-bold" id="task_save">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        var urlGetTaskById = "@Url.Action("GetById", "Task")";

        var urlUpdateTask = "@Url.Action("Update", "Task")";

        var urlCreateTask = "@Url.Action("Create", "Task")";

        var urlDeleteTask = "@Url.Action("Delete", "Task")";

        var urlToggleTask = "@Url.Action("ToggleCompleted", "Task")";

        $(document).ready(function() {
            $("#new_task_button").on("click",
                function() {
                    openTaskForm(false);
                });
            $("#task_save").on("click",
                function() {
                    submitTaskForm();
                });
            $("#task_form").validate().settings.errorClass = "is-invalid";
        });

        function toggleTaskCompleted(taskId) {
            $.ajax({
                type: "PUT",
                url: `${urlToggleTask}?taskId=${taskId}`,
                success: function (e) {
                    KTApp.block("#task_card");
                    location.reload();
                },
                error: function(e) {
                    actionFailure(e);
                }
            });
        }

        function openTaskForm(editMode, taskId) {
            if (editMode) {
                $("#task_modal").addClass("edit-mode");

                $("#task_id").removeAttr("disabled");

                $("#task_modal_title").text("Edit Task");

                $.ajax({
                    type: "GET",
                    dataType: "json",
                    url: `${urlGetTaskById}?taskId=${taskId}`,
                    success: function(data) {
                        $("#task_type").val(data["typeId"]);
                        $("#task_title").val(data["title"]);
                        $("#task_description").val(data["description"]);
                        $("#task_duedate").val(data["dueDate"]);
                        $("#task_id").val(data["id"]);
                    },
                    error: function(data) {
                        toastr.error(data.responseJSON);
                    }
                });

            } else {
                $("#task_modal").removeClass("edit-mode");

                $("#task_id").attr("disabled", "true");

                $("#task_modal_title").text("New Task");
            }

            $("#task_assignedToId").val("@Model.Person?.Id");
            $("#task_modal").modal('show');
        }

        function deleteTask(taskId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "Are you sure you want to delete this task? This cannot be undone.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        type: "DELETE",
                        url: `${urlDeleteTask}?taskId=${taskId}`,
                        success: function(e) {
                            actionSuccess(e);
                        },
                        error: function(e) {
                            actionFailure(e);
                        }
                    });
                }
            });
        }

        function submitTaskForm() {

            if ($("#task_form").valid()) {
                if ($("#task_modal").hasClass("edit-mode")) {
                    $.ajax({
                        type: "PUT",
                        url: urlUpdateTask,
                        data: $("#task_form").serialize(),
                        success: function(e) {
                            $("#task_modal").modal('hide');
                            actionSuccess(e);
                        },
                        error: function(e) {
                            actionFailure(e);
                        }
                    });
                } else {
                    $.ajax({
                        type: "POST",
                        url: urlCreateTask,
                        data: $("#task_form").serialize(),
                        success: function(e) {
                            $("#task_modal").modal('hide');
                            actionSuccess(e);
                        },
                        error: function(e) {
                            actionFailure(e);
                        }
                    });
                }
            }
        }

        function actionSuccess(e) {
            Swal.fire({
                title: "Success",
                text: e,
                icon: "success"
            }).then(function() {
                //Reload log notes
                location.reload();
            });
        }

        function actionFailure(e) {
            Swal.fire({
                title: "Error",
                text: e.responseText,
                icon: "error"
            });
        }
    </script>
}