@model MyPortalCore.Areas.Staff.ViewModels.Student.StudentDocumentsViewModel
@{
    ViewBag.Title = "Documents";
    Layout = "~/Areas/Staff/Views/Shared/_Layout.cshtml";
}

<!--Header-->
<div class="kt-subheader   kt-grid__item" id="kt_subheader">
    <div class="kt-container  kt-container--fluid ">
        <div class="kt-subheader__main">
            <h3 class="kt-subheader__title">
                <i class="fas fa-file mr-2"></i>Documents
            </h3>
            <span class="kt-subheader__separator kt-subheader__separator--v"></span>
            <div class="kt-subheader__group" id="kt_subheader_search">
                <span class="kt-subheader__desc" id="kt_subheader_total">
                    @Model.Student.Person.GetDisplayName()
                </span>
            </div>
        </div>
        <div class="kt-subheader__toolbar">

        </div>
    </div>
</div>

<!--Content-->
<div class="kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid">
    <!--Begin::App-->
    <div class="kt-grid kt-grid--desktop kt-grid--ver kt-grid--ver-desktop kt-app">

        <!--Begin:: App Aside Mobile Toggle-->
        <button class="kt-app__aside-close" id="kt_user_profile_aside_close">
            <i class="la la-close"></i>
        </button>
        <!--End:: App Aside Mobile Toggle-->

        <partial name="_StudentProfileSideBar"/>

        <!--Begin:: App Content-->
        <div class="kt-grid__item kt-grid__item--fluid kt-app__content">
            <div class="row">
                <div class="col-xl-8">
                    <!--begin:: Documents-->
                    <div class="kt-portlet kt-portlet--height-fluid">
                        <div class="kt-portlet__head">
                            <div class="kt-portlet__head-label">
                                <h3 class="kt-portlet__head-title">
                                    Documents
                                </h3>
                            </div>
                            <div class="kt-portlet__head-toolbar">
                                <btn type="button" class="btn btn-brand btn-bold btn-sm mr-2" id="btnNewDocument">
                                    <i class="fas fa-plus mr-2"></i>Add Document
                                </btn>
                                <btn type="button" class="btn btn-brand btn-bold btn-sm" id="btnNewDirectory">
                                    <i class="fas fa-plus mr-2"></i>Add Directory
                                </btn>
                            </div>
                        </div>
                        <div class="kt-portlet__body">
                            <div>
                                <button type="button" class="btn btn-sm btn-info" id="backButton" disabled><i class="fas fa-arrow-left mr-2"></i>Back</button>
                            </div>
                            <div class="row mt-2">
                                <div class="col-md-12">
                                    <table id="tblDocuments" class="table table-striped font-weight-500" data-directory-id="@Model.Student.Person.DirectoryId">
                                        <thead>
                                        <tr>
                                            <th>
                                                Name
                                            </th>
                                            <th>
                                                Type
                                            </th>
                                            <th>
                                                Uploaded
                                            </th>
                                            <th>
                                                Actions
                                            </th>
                                        </tr>
                                        </thead>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!--end:: Documents-->
            </div>
        </div>
    </div>
    <!--End:: App Content-->
    
    <div class="modal fade" id="directory_modal" tabindex="-1" role="dialog" aria-labelledby="directory_modal_title" style="display: none;" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="directory_modal_title">Directory</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    </button>
                </div>
                <form id="directory_form">
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="directory_name">Name</label>
                            <input asp-for="Directory.Name" name="Name" type="text" id="directory_name" class="form-control"/>
                            @Html.ValidationMessageFor(x => x.Directory.Name, null, new{data_valmsg_for="Name", @class="text-danger"})
                        </div>

                        <input type="hidden" name="ParentId" id="directory_parentId" />
                        <input type="hidden" name="Id" id="directory_id"/>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="directory_save">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
<!--End::App-->

@section Scripts
{
    <script>

        var urlGetDirectoryInfo = "@Url.RouteUrl("ApiDirectoryGetChildren")";

        var urlGetDirectoryById = "@Url.RouteUrl("ApiDirectoryGetById")";
        var urlCreateDirectory = "@Url.RouteUrl("ApiDirectoryCreate")";
        var urlUpdateDirectory = "@Url.RouteUrl("ApiDirectoryUpdate")";
        var urlDeleteDirectory = "@Url.RouteUrl("ApiDirectoryDelete")";

        var rootDirectory = "@Model.Student.Person.DirectoryId";

        $(document).ready(function() {
            $("#studentDocumentsLink").addClass("kt-widget__item--active");

            loadDirectory(rootDirectory);

            $("#backButton").on("click",
                function() {
                    loadDirectory($(this).attr("data-parent-id"));
                });

            $("#btnNewDirectory").on("click",
                function() {
                    openDirectoryForm(false);
                });

            $("#directory_save").on("click",
                function() {
                    submitDirectoryForm();
                });
        });

        function loadDirectory(directoryId) {
            var table = $("#tblDocuments");

            table.attr("data-directory-id", directoryId);

            var params = { directoryId: directoryId };

            var url = `${urlGetDirectoryInfo}?${$.param(params)}`;

            if (table.hasClass("dataTable")) {
                var dt = table.DataTable();

                dt.ajax.url(url);

                dt.ajax.reload();
            } else {
                loadDataTable(url);
            }
        }

        function openDirectoryForm(editMode, directoryId) {
            if (editMode) {
                $("#directory_modal").addClass("edit-mode");

                $("#directory_id").removeAttr("disabled");

                $("#directory_modal_title").text("Edit Directory");

                $.ajax({
                    type: "GET",
                    dataType: "json",
                    url: `${urlGetDirectoryById}?directoryId=${directoryId}`,
                    success: function(data) {
                        $("#directory_name").val(data["name"]);
                        $("#directory_parentId").val(data["parentId"]);
                        $("#directory_id").val(data["id"]);
                    },
                    error: function(data) {
                        toastr.error(data.responseJSON);
                    }
                });

            } else {
                $("#directory_modal").removeClass("edit-mode");

                $("#directory_id").attr("disabled", "true");

                $("#directory_modal_title").text("New Directory");
            }

            $("#directory_parentId").val($("#tblDocuments").attr("data-directory-id"));
            $("#directory_modal").modal('show');
        }

        function submitDirectoryForm() {

            if ($("#directory_form").valid()) {
                if ($("#directory_modal").hasClass("edit-mode")) {
                    $.ajax({
                        type: "PUT",
                        url: urlUpdateDirectory,
                        data: $("#directory_form").serialize(),
                        success: function(e) {
                            $("#directory_modal").modal('hide');
                            directorySuccess(e);
                        },
                        error: function(e) {
                            directoryFailure(e);
                        }
                    });
                } else {
                    $.ajax({
                        type: "POST",
                        url: urlCreateDirectory,
                        data: $("#directory_form").serialize(),
                        success: function(e) {
                            $("#directory_modal").modal('hide');
                            directorySuccess(e);
                        },
                        error: function(e) {
                            directoryFailure(e);
                        }
                    });
                }
            }
        }

        function editDirectory(directoryId) {
            if (directoryId != null) {
                openDirectoryForm(true, directoryId);
            }
        }

        function deleteDirectory(directoryId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "Are you sure you want to delete this directory? This cannot be undone.",
                type: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        type: "DELETE",
                        url: `${urlDeleteDirectory}?directoryId=${directoryId}`,
                        success: function(e) {
                            directorySuccess(e);
                        },
                        error: function(e) {
                            directoryFailure(e);
                        }
                    });
                }
            });
        }

        function directorySuccess(e) {
            Swal.fire({
                title: "Success",
                text: e,
                type: "success"
            }).then(function() {
                //Reload directory
                loadDirectory($("#tblDocuments").attr("data-directory-id"));
            });
        }

        function directoryFailure(e) {
            Swal.fire({
                title: "Error",
                text: e.responseText,
                type: "error"
            });
        }

        function setBackButton(directory) {
            if (directory.parentId == null) {
                $("#backButton").attr("disabled", true);
                $("#backButton").removeAttr("data-parent-id");
            } else {
                $("#backButton").removeAttr("disabled");
                $("#backButton").attr("data-parent-id", directory.parentId);
            }
        }

        function loadDataTable(url) {
            $("#tblDocuments").DataTable({
                ajax:
                {
                    url: url,
                    dataSrc: function(data) {
                        setBackButton(data.directory);

                        return data.children;
                    }
                },
                "dom": "rtilp",
                columns: [
                    {
                        data: "id",
                        render: function(data, type, child) {
                            if (child.isDirectory) {
                                return `<span><img src="${child.icon}" class="mr-2" height="30"/><a href="javascript:loadDirectory('${child.id}');">${child.name}</a></span>`;
                            } else {
                                return `<span><img src="${child.icon}" class="mr-2" height="30"/>${child.name}</span>`;
                            }
                        }
                    },
                    {
                        data: "type"
                    },
                    {
                        data: "createdDate",
                        render: function(data, type, child) {
                            if (child.isDirectory) {
                                return "";
                            } else {
                                return `${moment(child.createdDate).format("DD/MM/YYYY")}`;
                            }
                        }
                    },
                    {
                        data: "id",
                        render: function(data, type, child) {
                            if (child.isDirectory) {
                                return `<div class="dropdown dropdown-inline mr-4"> <button type="button" class="btn btn-info btn-icon btn-sm" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> <i class="fas fa-ellipsis-h"></i> </button> <div class="dropdown-menu"> <a class="dropdown-item" href="javascript:editDirectory('${child.id}')">Edit</a> <a class="dropdown-item text-danger" href="javascript:deleteDirectory('${child.id}')">Delete</a> </div> </div>`;
                            } else {
                                return `<div class="dropdown dropdown-inline mr-4"> <button type="button" class="btn btn-info btn-icon btn-sm" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> <i class="fas fa-ellipsis-h"></i> </button> <div class="dropdown-menu"> <a class="dropdown-item" href="">Download</a> <a class="dropdown-item" href="">Edit</a> <a class="dropdown-item text-danger" href="">Delete</a> </div> </div>`;
                            }
                        }
                    }
                ],
                "ordering": false,
                "language":
                {
                    "emptyTable": "No documents"
                }
            });
        }
    </script>

    <script src="~/js/modals.js"></script>
}

