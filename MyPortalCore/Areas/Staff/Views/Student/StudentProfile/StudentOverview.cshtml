@using Microsoft.CodeAnalysis.CSharp.Syntax
@model MyPortalCore.Areas.Staff.ViewModels.Student.StudentOverviewViewModel
@{
    ViewBag.Title = $"Student Overview - {Model.Student.Person.GetDisplayName()}";
    Layout = "~/Areas/Staff/Views/Shared/_Layout.cshtml";
}

<!--begin::Subheader-->
<div class="subheader py-2 py-lg-4 subheader-solid" id="kt_subheader">
    <div class="container-fluid d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
        <!--begin::Info-->
        <div class="d-flex align-items-center flex-wrap mr-2">
            <!--begin::Page Title-->
            <h5 class="text-dark font-weight-bold mt-2 mb-2 mr-5"><i class="fas fa-user-graduate mr-2"></i>Student Overview</h5>
            <!--end::Page Title-->

        </div>
        <!--end::Info-->

    </div>
</div>
<!--end::Subheader-->

<div class="d-flex flex-column-fluid">
<div class="container">
<div class="d-flex flex-row">
<partial name="~/Areas/Staff/Views/Student/StudentProfile/_Sidebar.cshtml"/>

<!--begin::Content-->
<div class="flex-row-fluid ml-lg-8">
<!--begin::Row-->
<div class="row">
    <div class="col-xl-3">
        <!--begin::Stats Widget 30-->
        <div class="card card-custom bg-primary card-stretch gutter-b">
            <!--begin::Body-->
            <div class="card-body">
                <span class="svg-icon svg-icon-2x">
                    <i class="fad fa-fw fa-2x fa-stopwatch text-white"></i>
                </span>
                <span class="card-title font-weight-bolder text-white font-size-h2 mb-0 mt-6 d-block">@(Model.Attendance == null ? "--" : Model.Attendance.Value.ToString("#.00%"))</span>
                <span class="font-weight-bold text-white font-size-sm">Attendance</span>
            </div>
            <!--end::Body-->
        </div>
        <!--end::Stats Widget 30-->
    </div>
    <div class="col-xl-3">
        <!--begin::Stats Widget 30-->
        <div class="card card-custom bg-danger card-stretch gutter-b">
            <!--begin::Body-->
            <div class="card-body">
                <span class="svg-icon svg-icon-2x">
                    <i class="fad fa-fw fa-2x fa-star-exclamation text-white"></i>
                </span>
                <span class="card-title font-weight-bolder text-white font-size-h2 mb-0 mt-6 d-block">@Model.BehaviourPoints</span>
                <span class="font-weight-bold text-white font-size-sm">Behaviour Points</span>
            </div>
            <!--end::Body-->
        </div>
        <!--end::Stats Widget 30-->
    </div>
    <div class="col-xl-3">
        <!--begin::Stats Widget 30-->
        <div class="card card-custom bg-success card-stretch gutter-b">
            <!--begin::Body-->
            <div class="card-body">
                <span class="svg-icon svg-icon-2x">
                    <i class="fad fa-fw fa-2x fa-star text-white"></i>
                </span>
                <span class="card-title font-weight-bolder text-white font-size-h2 mb-0 mt-6 d-block">@Model.AchievementPoints</span>
                <span class="font-weight-bold text-white font-size-sm">Achievement Points</span>
            </div>
            <!--end::Body-->
        </div>
        <!--end::Stats Widget 30-->
    </div>
</div>

<div class="row">
    <div class="col-lg-6">
        <!--begin::List Widget 10-->
        <div class="card card-custom card-stretch gutter-b" id="task_card">
            <!--begin::Header-->
            <div class="card-header border-0">
                <h3 class="card-title font-weight-bolder text-dark">Tasks</h3>
                <div class="card-toolbar">
                    <button class="btn btn-light-primary font-weight-bolder" id="new_task_button">
                        <span class="svg-icon svg-icon-md">
                            <i class="fas fa-plus"></i>
                        </span>Add Task
                    </button>
                </div>
            </div>
            <!--end::Header-->
            <!--begin::Body-->
            <div class="card-body pt-2">
                @if (Model.Tasks.Any())
                {
                    <!--begin::Item-->
                    @foreach (var task in Model.Tasks)
                    {
                        <div class="d-flex align-items-center mb-10">
                            <!--begin::Bullet-->
                            <span class="bullet bullet-bar align-self-stretch" style="background-color: @task.TaskTypeColourCode"></span>
                            <!--end::Bullet-->
                            <!--begin::Checkbox-->
                            <label class="checkbox checkbox-lg @(task.Overdue ? "checkbox-light-danger" : "") checkbox-inline flex-shrink-0 m-0 mx-4">
                                <input type="checkbox" name="select" onclick="return false;" @if (task.Completed) { <text> checked="checked" </text> }>
                                <span></span>
                            </label>
                            <!--end::Checkbox-->
                            <!--begin::Text-->
                            <div class="d-flex flex-column flex-grow-1">
                                <div class="mb-1">
                                    <a href="#" class="text-dark-75 text-hover-primary font-weight-bold font-size-lg mb-1">@task.Title</a>
                                </div>
                                @if (!string.IsNullOrWhiteSpace(task.AssignedByName))
                                {
                                    <div class="mb-1">
                                        <span class="text-muted font-weight-bold">@($"{task.AssignedByName}")</span>
                                    </div>
                                }
                                @if (task.DueDate != null)
                                {
                                    <div class="mb-1">
                                        <span class="text-muted font-weight-bold">@($"{task.DueDate.Value.ToString("d")}")</span>
                                    </div>
                                }
                                <div class="mt-1">
                                    <span class="label label-pill label-inline mx-2" style="background-color: @task.TaskTypeColourCode; color: white;">@task.TaskTypeName</span>
                                    @if (task.Overdue)
                                    {
                                        <span class="label label-danger label-pill label-inline">Overdue</span>
                                    }
                                </div>
                            </div>
                            <!--end::Text-->
                            @if (task.CanEdit)
                            {
                                <div class="dropdown ml-2">
                                    <a href="#" class="btn btn-hover-light-primary btn-sm btn-icon" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <i class="ki ki-more-hor font-size-lg text-primary"></i>
                                    </a>
                                    <div class="dropdown-menu dropdown-menu-md dropdown-menu-right" style="">
                                        <!--begin::Navigation-->
                                        <ul class="navi navi-hover py-5">
                                            <li class="navi-item">
                                                <a href="javascript:toggleTaskCompleted('@task.Id')" class="navi-link">
                                                    <span class="navi-icon"><i class="fas fa-fw fa-check-circle"></i></span>
                                                    <span class="navi-text">Toggle Completed</span>
                                                </a>
                                            </li>
                                            <li class="navi-item">
                                                <a href="javascript:openTaskForm(true, '@task.Id')" class="navi-link">
                                                    <span class="navi-icon"><i class="fas fa-fw fa-edit"></i></span>
                                                    <span class="navi-text">Edit</span>
                                                </a>
                                            </li>
                                            <li class="navi-item">
                                                <a href="javascript:deleteTask('@task.Id')" class="navi-link">
                                                    <span class="navi-icon"><i class="fas fa-fw fa-trash-alt"></i></span>
                                                    <span class="navi-text">Delete</span>
                                                </a>
                                            </li>
                                        </ul>
                                        <!--end::Navigation-->
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    <!--end:Item-->
                }
                else
                {
                    <p class="text-muted font-weight-bold px-3">No active tasks</p>
                }
            </div>
            <!--end: Card Body-->
        </div>
        <!--end: Card-->
        <!--end: List Widget 10-->
    </div>
</div>
<!--end::Row-->
<div class="row">
    <div class="col-lg-12">
            <!--begin::List Widget 10-->
            <div class="card card-custom card-stretch gutter-b">
                <!--begin::Header-->
                <div class="card-header border-0">
                    <h3 class="card-title font-weight-bolder text-dark">Timetable</h3>
                    <div class="card-toolbar">
                        
                    </div>
                </div>
                <!--end::Header-->
                <!--begin::Body-->
                <div class="card-body pt-0">
                    <div id="timetable"></div>
                </div>
                <!--end: Card Body-->
            </div>
            <!--end: Card-->
            <!--end: List Widget 10-->
        </div>
</div>
<!--begin::Advance Table: Widget 7-->
<div class="card card-custom gutter-bs">
    <!--begin::Header-->
    <div class="card-header border-0 pt-5">
        <h3 class="card-title align-items-start flex-column">
            <span class="card-label font-weight-bolder text-dark">Log Notes</span>
        </h3>
        <div class="card-toolbar">
            <button class="btn btn-light-primary font-weight-bolder" id="new_lognote_button">
                <span class="svg-icon svg-icon-md">
                    <i class="fas fa-plus"></i>
                </span>Add Log Note
            </button>
        </div>
    </div>
    <!--end::Header-->
    <!--begin::Body-->
    <div class="card-body px-0">
        <div class="container">
            <div class="timeline timeline-3">
                <div class="timeline-items">
                    @if (Model.LogNotes.Any())
                    {
                        @foreach (var logNote in Model.LogNotes)
                        {
                            <div class="timeline-item">
                                <div class="timeline-media">
                                    <i class="fas fa-fw @logNote.LogTypeIcon" style="color:@logNote.LogTypeColourCode"></i>
                                </div>
                                <div class="timeline-content">
                                    <div class="d-flex align-items-center justify-content-between mb-3">
                                        <div class="mr-2">
                                            <span class="text-dark-75 font-weight-bold">@logNote.AuthorName</span>
                                            <span class="text-muted ml-2">@logNote.CreatedDate.ToString("dd/MM/yyyy")</span>
                                            <span class="label font-weight-bolder label-inline ml-2" style="background-color: @logNote.LogTypeColourCode; color: white;">@logNote.LogTypeName</span>
                                        </div>
                                        <div class="dropdown ml-2" data-toggle="tooltip" title="" data-placement="left" data-original-title="Quick actions">
                                            <a href="#" class="btn btn-hover-light-primary btn-sm btn-icon" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                <i class="ki ki-more-hor font-size-lg text-primary"></i>
                                            </a>
                                            <div class="dropdown-menu dropdown-menu-md dropdown-menu-right" style="">
                                                <!--begin::Navigation-->
                                                <ul class="navi navi-hover py-5">
                                                    <li class="navi-item">
                                                        <a href="javascript:openLogNoteForm(true, '@logNote.Id')" class="navi-link">
                                                            <span class="navi-icon"><i class="fas fa-fw fa-edit"></i></span>
                                                            <span class="navi-text">Edit</span>
                                                        </a>
                                                    </li>
                                                    <li class="navi-item">
                                                        <a href="javascript:deleteLogNote('@logNote.Id')" class="navi-link">
                                                            <span class="navi-icon"><i class="fas fa-fw fa-trash-alt"></i></span>
                                                            <span class="navi-text">Delete</span>
                                                        </a>
                                                    </li>
                                                </ul>
                                                <!--end::Navigation-->
                                            </div>
                                        </div>
                                    </div>
                                    <p class="p-0">@logNote.Message</p>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted font-weight-bold px-3">No log notes</p>
                    }
                </div>
            </div>
        </div>
    </div>
    <!--end::Body-->
</div>
<!--end::Advance Table Widget 7-->
</div>
<!--end::Content-->
</div>
</div>
</div>

<div class="modal fade" id="lognote_modal" tabindex="-1" role="dialog" aria-labelledby="lognote_modal" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="lognote_modal_title"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i aria-hidden="true" class="ki ki-close"></i>
                </button>
            </div>
            <form id="lognote_form">
                <div class="modal-body">
                    <div class="form-group">
                        <label for="lognote_type">Log Note Type</label>
                        <select asp-for="LogNote.TypeId" asp-items="Model.LogNoteTypes" name="TypeId" class="form-control" id="lognote_type"></select>
                        @Html.ValidationMessageFor(x => x.LogNote.TypeId, null, new{data_valmsg_for="TypeId", @class="text-danger"})
                    </div>
                    <div class="form-group">
                        <label for="lognote_message">Message</label>
                        <textarea asp-for="LogNote.Message" class="form-control" id="lognote_message" name="Message" rows="10"></textarea>
                        @Html.ValidationMessageFor(x => x.LogNote.Message, null, new{data_valmsg_for="Message", @class="text-danger"})
                    </div>
                    
                    <input type="hidden" name="StudentId" id="lognote_studentid" />
                    <input type="hidden" name="Id" id="lognote_id"/>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light-primary font-weight-bold" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary font-weight-bold" id="lognote_save">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="task_modal" tabindex="-1" role="dialog" aria-labelledby="task_modal" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="task_modal_title"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i aria-hidden="true" class="ki ki-close"></i>
                </button>
            </div>
            <form id="task_form">
                <div class="modal-body">
                    <div class="form-group">
                        <label for="task_type">Task Type</label>
                        <select asp-for="Task.TypeId" asp-items="Model.TaskTypes" name="TypeId" class="form-control" id="task_type"></select>
                        @Html.ValidationMessageFor(x => x.Task.TypeId, null, new { data_valmsg_for = "TypeId", @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label for="task_title">Title</label>
                        <input type="text" asp-for="Task.Title" class="form-control" id="task_title" name="Title" />
                        @Html.ValidationMessageFor(x => x.Task.Title, null, new { data_valmsg_for = "Title", @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label for="task_description">Description</label>
                        <textarea asp-for="Task.Description" class="form-control" id="task_description" name="Description" rows="7"></textarea>
                        @Html.ValidationMessageFor(x => x.Task.Description, null, new { data_valmsg_for = "Description", @class = "text-danger" })
                    </div>
                    <div class="form-group">
                        <label for="task_duedate">Due Date</label>
                        <input type="datetime-local" asp-for="Task.DueDate" class="form-control" id="task_duedate" name="DueDate" />
                        @Html.ValidationMessageFor(x => x.Task.Title, null, new { data_valmsg_for = "DueDate", @class = "text-danger" })
                    </div>
                    <input type="hidden" name="AssignedToId" id="task_assignedToId"/>
                    <input type="hidden" name="Id" id="task_id" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light-primary font-weight-bold" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary font-weight-bold" id="task_save">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts
{
    <script>

        var urlGetLogNoteById = "@Url.Action("GetById", "LogNote")";

        var urlUpdateLogNote = "@Url.Action("Update", "LogNote")";

        var urlCreateLogNote = "@Url.Action("Create", "LogNote")";

        var urlDeleteLogNote = "@Url.Action("Delete", "LogNote")";


        var urlGetTaskById = "@Url.Action("GetById", "Task")";

        var urlUpdateTask = "@Url.Action("Update", "Task")";

        var urlCreateTask = "@Url.Action("Create", "Task")";

        var urlDeleteTask = "@Url.Action("Delete", "Task")";

        var urlToggleTask = "@Url.Action("ToggleCompleted", "Task")";

        $(document).ready(function() {

            $("#link_overview").addClass("active");

            $("#new_lognote_button").on("click",
                function() {
                    openLogNoteForm(false);
                });

            $("#new_task_button").on("click",
                function() {
                    openTaskForm(false);
                });

            $("#lognote_save").on("click",
                function() {
                    submitLogNoteForm();
                });

            $("#task_save").on("click",
                function() {
                    submitTaskForm();
                });

            $("#lognote_form").validate().settings.errorClass = "is-invalid";
            $("#task_form").validate().settings.errorClass = "is-invalid";
            
            Timetable.init();
        });

        function openLogNoteForm(editMode, logNoteId) {
            if (editMode) {
                $("#lognote_modal").addClass("edit-mode");

                $("#lognote_id").removeAttr("disabled");

                $("#lognote_modal_title").text("Edit Log Note");

                $.ajax({
                    type: "GET",
                    dataType: "json",
                    url: `${urlGetLogNoteById}?logNoteId=${logNoteId}`,
                    success: function(data) {
                        $("#lognote_type").val(data["typeId"]);
                        $("#lognote_message").val(data["message"]);
                        $("#lognote_id").val(data["id"]);
                    },
                    error: function(data) {
                        toastr.error(data.responseJSON);
                    }
                });

            } else {
                $("#lognote_modal").removeClass("edit-mode");

                $("#lognote_id").attr("disabled", "true");

                $("#lognote_modal_title").text("New Log Note");
            }

            $("#lognote_studentid").val("@Model.Student.Id");
            $("#lognote_modal").modal('show');
        }

        function deleteLogNote(logNoteId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "Are you sure you want to delete this log note? This cannot be undone.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        type: "DELETE",
                        url: `${urlDeleteLogNote}?logNoteId=${logNoteId}`,
                        success: function(e) {
                            actionSuccess(e);
                        },
                        error: function(e) {
                            actionFailure(e);
                        }
                    });
                }
            });
        }

        function submitLogNoteForm() {

            if ($("#lognote_form").valid()) {
                if ($("#lognote_modal").hasClass("edit-mode")) {
                    $.ajax({
                        type: "PUT",
                        url: urlUpdateLogNote,
                        data: $("#lognote_form").serialize(),
                        success: function(e) {
                            $("#lognote_modal").modal('hide');
                            actionSuccess(e);
                        },
                        error: function(e) {
                            actionFailure(e);
                        }
                    });
                } else {
                    $.ajax({
                        type: "POST",
                        url: urlCreateLogNote,
                        data: $("#lognote_form").serialize(),
                        success: function(e) {
                            $("#lognote_modal").modal('hide');
                            actionSuccess(e);
                        },
                        error: function(e) {
                            actionFailure(e);
                        }
                    });
                }
            }
        }

        function toggleTaskCompleted(taskId) {
            $.ajax({
                type: "PUT",
                url: `${urlToggleTask}?taskId=${taskId}`,
                success: function (e) {
                    KTApp.block("#task_card");
                    location.reload();
                },
                error: function(e) {
                    actionFailure(e);
                }
            });
        }

        function openTaskForm(editMode, taskId) {
            if (editMode) {
                $("#task_modal").addClass("edit-mode");

                $("#task_id").removeAttr("disabled");

                $("#task_modal_title").text("Edit Task");

                $.ajax({
                    type: "GET",
                    dataType: "json",
                    url: `${urlGetTaskById}?taskId=${taskId}`,
                    success: function(data) {
                        $("#task_type").val(data["typeId"]);
                        $("#task_title").val(data["title"]);
                        $("#task_description").val(data["description"]);
                        $("#task_duedate").val(data["dueDate"]);
                        $("#task_id").val(data["id"]);
                    },
                    error: function(data) {
                        toastr.error(data.responseJSON);
                    }
                });

            } else {
                $("#task_modal").removeClass("edit-mode");

                $("#task_id").attr("disabled", "true");

                $("#task_modal_title").text("New Task");
            }

            $("#task_assignedToId").val("@Model.Student.Person.Id");
            $("#task_modal").modal('show');
        }

        function deleteTask(taskId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "Are you sure you want to delete this task? This cannot be undone.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes"
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        type: "DELETE",
                        url: `${urlDeleteTask}?taskId=${taskId}`,
                        success: function(e) {
                            actionSuccess(e);
                        },
                        error: function(e) {
                            actionFailure(e);
                        }
                    });
                }
            });
        }

        function submitTaskForm() {

            if ($("#task_form").valid()) {
                if ($("#task_modal").hasClass("edit-mode")) {
                    $.ajax({
                        type: "PUT",
                        url: urlUpdateTask,
                        data: $("#task_form").serialize(),
                        success: function(e) {
                            $("#task_modal").modal('hide');
                            actionSuccess(e);
                        },
                        error: function(e) {
                            actionFailure(e);
                        }
                    });
                } else {
                    $.ajax({
                        type: "POST",
                        url: urlCreateTask,
                        data: $("#task_form").serialize(),
                        success: function(e) {
                            $("#task_modal").modal('hide');
                            actionSuccess(e);
                        },
                        error: function(e) {
                            actionFailure(e);
                        }
                    });
                }
            }
        }

        function actionSuccess(e) {
            Swal.fire({
                title: "Success",
                text: e,
                icon: "success"
            }).then(function() {
                //Reload log notes
                location.reload();
            });
        }

        function actionFailure(e) {
            Swal.fire({
                title: "Error",
                text: e.responseText,
                icon: "error"
            });
        }
        
        var Timetable = function() {
        
            return {
                //main function to initiate the module
                init: function() {
                    var todayDate = moment().startOf('day');
                    var TODAY = todayDate.format('YYYY-MM-DD');                   
        
                    var calendarEl = document.getElementById('timetable');
                    var calendar = new FullCalendar.Calendar(calendarEl, {
                        plugins: [ 'bootstrap', 'interaction', 'dayGrid', 'timeGrid', 'list' ],
                        themeSystem: 'bootstrap',
        
                        isRTL: KTUtil.isRTL(),
                        
                        locale: 'en-gb',
                        
                        firstDay: 1,
        
                        header: {
                            left: 'prev,next today',
                            center: 'title',
                            right: 'dayGridMonth,timeGridWeek,timeGridDay'
                        },                
        
                        nowIndicator: true,                       
        
                        views: {
                            dayGridMonth: { buttonText: 'month' },
                            timeGridWeek: { buttonText: 'week' },
                            timeGridDay: { buttonText: 'day' }
                        },
        
                        defaultView: 'timeGridWeek',
                        defaultDate: TODAY,
        
                        editable: false,
                        eventLimit: true, // allow "more" link when too many events
                        navLinks: true,            
        
                        eventRender: function(info) {
                            var element = $(info.el);
        
                            if (info.event.extendedProps && info.event.extendedProps.description) {
                                if (element.hasClass('fc-day-grid-event')) {
                                    element.data('content', info.event.extendedProps.description);
                                    element.data('placement', 'top');
                                    KTApp.initPopover(element);
                                } else if (element.hasClass('fc-time-grid-event')) {
                                    element.find('.fc-title').append('<div class="fc-description">' + info.event.extendedProps.description + '</div>');
                                } else if (element.find('.fc-list-item-title').lenght !== 0) {
                                    element.find('.fc-list-item-title').append('<div class="fc-description">' + info.event.extendedProps.description + '</div>');
                                }
                            }
                        }
                    });
        
                    calendar.render();
                }
            };
        }();
    </script>

    <script src="~/js/modals.js"></script>
}