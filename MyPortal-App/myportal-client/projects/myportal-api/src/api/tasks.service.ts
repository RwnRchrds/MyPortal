/**
 * MyPortal
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TasksService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _delete(taskId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public _delete(taskId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public _delete(taskId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public _delete(taskId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/tasks/delete`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param assignedToId 
     * @param typeId 
     * @param title 
     * @param description 
     * @param dueDate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createForm(assignedToId?: string, typeId?: string, title?: string, description?: string, dueDate?: Date, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createForm(assignedToId?: string, typeId?: string, title?: string, description?: string, dueDate?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createForm(assignedToId?: string, typeId?: string, title?: string, description?: string, dueDate?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createForm(assignedToId?: string, typeId?: string, title?: string, description?: string, dueDate?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (assignedToId !== undefined) {
            formParams = formParams.append('AssignedToId', <any>assignedToId) as any || formParams;
        }
        if (typeId !== undefined) {
            formParams = formParams.append('TypeId', <any>typeId) as any || formParams;
        }
        if (title !== undefined) {
            formParams = formParams.append('Title', <any>title) as any || formParams;
        }
        if (description !== undefined) {
            formParams = formParams.append('Description', <any>description) as any || formParams;
        }
        if (dueDate !== undefined) {
            formParams = formParams.append('DueDate', <any>dueDate) as any || formParams;
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/tasks/create`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getById(taskId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getById(taskId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getById(taskId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getById(taskId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/tasks/id`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param personal 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTaskTypes(personal?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getTaskTypes(personal?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getTaskTypes(personal?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getTaskTypes(personal?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (personal !== undefined && personal !== null) {
            queryParameters = queryParameters.set('personal', <any>personal);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/tasks/types`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public toggleCompleted(taskId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public toggleCompleted(taskId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public toggleCompleted(taskId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public toggleCompleted(taskId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/api/tasks/toggle`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param dueDate 
     * @param completed 
     * @param assignedToId 
     * @param typeId 
     * @param title 
     * @param description 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateForm(id?: string, dueDate?: Date, completed?: boolean, assignedToId?: string, typeId?: string, title?: string, description?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateForm(id?: string, dueDate?: Date, completed?: boolean, assignedToId?: string, typeId?: string, title?: string, description?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateForm(id?: string, dueDate?: Date, completed?: boolean, assignedToId?: string, typeId?: string, title?: string, description?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateForm(id?: string, dueDate?: Date, completed?: boolean, assignedToId?: string, typeId?: string, title?: string, description?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (id !== undefined) {
            formParams = formParams.append('Id', <any>id) as any || formParams;
        }
        if (dueDate !== undefined) {
            formParams = formParams.append('DueDate', <any>dueDate) as any || formParams;
        }
        if (completed !== undefined) {
            formParams = formParams.append('Completed', <any>completed) as any || formParams;
        }
        if (assignedToId !== undefined) {
            formParams = formParams.append('AssignedToId', <any>assignedToId) as any || formParams;
        }
        if (typeId !== undefined) {
            formParams = formParams.append('TypeId', <any>typeId) as any || formParams;
        }
        if (title !== undefined) {
            formParams = formParams.append('Title', <any>title) as any || formParams;
        }
        if (description !== undefined) {
            formParams = formParams.append('Description', <any>description) as any || formParams;
        }

        return this.httpClient.request<any>('put',`${this.basePath}/api/tasks/update`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
