@using MyPortal.Models.Database
@using MyPortal.Services
@model MyPortal.Areas.Staff.ViewModels.StaffDetailsViewModel
@{
    ViewBag.Title = "Staff Details: " + PeopleService.GetStaffFullName(Model.Staff).ResponseObject;
    ViewBag.DisplayTitle = "Staff Details";
    Layout = "~/Views/Shared/_LayoutStaff.cshtml";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">@PeopleService.GetDisplayName(Model.Staff).ResponseObject</h1>
</div>

<div class="row">
    
    <div class="col-xl-12 col-md-12 mb-4">

        <div class="dropdown mp-btn-top inline-block">
            <button class="btn btn-primary dropdown-toggle mp-btn-top" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fas fa-user"></i> Staff
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <h6 class="dropdown-header">@PeopleService.GetDisplayName(Model.Staff).ResponseObject</h6>
            </div>
        </div>

    </div>

</div>

<div class="row">
    <div class="col-xl-6 col-md-6">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Basic Details</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                <table class="table-condensed mp-table-condensed">
                    <tr>
                        <td>
                            <b>Title</b>
                        </td>
                        <td>@Model.Staff.Person.Title</td>
                    </tr>
                    <tr>
                        <td>
                            <b>First Name</b>
                        </td>
                        <td>@Model.Staff.Person.FirstName</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Last Name</b>
                        </td>
                        <td>@Model.Staff.Person.LastName</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Staff Code</b>
                        </td>
                        <td>@Model.Staff.Code</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Job Title</b>
                        </td>
                        <td>@Model.Staff.JobTitle</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Training</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">

                <div class="mb-4">

                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#NewCertModal">
                        <i class="fa fa-plus-circle"></i> New Certificate
                    </button>

                </div>

                @Html.EJS().Grid("Training").DataSource(dataManager =>
                {
                    dataManager.Url(Url.HttpRouteUrl("ApiPersonnelGetTrainingCertificatesByStaffMemberDataGrid", new {staffId = Model.Staff.Id})).CrossDomain(false).Adaptor("UrlAdaptor");
                }).Columns(c =>
                {
                    c.Field("CourseCode").HeaderText("Code").Template("#trainingCodeTemplate").Width("150").Add();
                    c.Field("CourseDescription").HeaderText("Description").Template("#trainingDescriptionTemplate").Width("200").Add();
                    c.Field("Status").HeaderText("Status").Template("#trainingStatusTemplate").Width("150").Add();
                    c.HeaderText("Actions").Template("#trainingActionsTemplate").Width("170").Add();
                }).AllowPaging().PageSettings(p => p.PageSize(5)).RowDataBound("trainingRowFunction").Render()
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Observations</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">

                <div class="mb-4">

                    <button type="button" class="btn btn-primary" onclick="populateNewObserverSelection()">
                        <i class="fa fa-plus-circle"></i> New Observation
                    </button>

                </div>

                @Html.EJS().Grid("Observations").DataSource(dataManager =>
                {
                    dataManager.Url(Url.HttpRouteUrl("ApiPersonnelGetObservationsByStaffMemberDataGrid", new {staffMemberId = Model.Staff.Id})).CrossDomain(false).Adaptor("UrlAdaptor");
                }).Columns(c =>
                {
                    c.Field("Date").HeaderText("Date").Template("#observationsDateTemplate").Width("150").Add();
                    c.Field("ObserverName").HeaderText("Observed By").Template("#observationsObserverTemplate").Width("200").Add();
                    c.Field("Outcome").HeaderText("Outcome").Template("#observationsOutcomeTemplate").Width("150").Add();
                    c.HeaderText("Actions").Template("#observationsActionsTemplate").Width("170").Add();
                }).AllowPaging().PageSettings(p => p.PageSize(5)).RowDataBound("observationsRowFunction").Render()
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Documents</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">

                <div class="mb-4">

                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#NewDocumentModal">
                        <i class="fa fa-plus-circle"></i> New Document
                    </button>

                </div>

                @Html.EJS().Grid("Documents").DataSource(dataManager =>
                {
                    dataManager.Url(Url.HttpRouteUrl("ApiDocumentsGetPersonalDocumentsByPersonDataGrid", new {personId = Model.Staff.Person.Id})).CrossDomain(false).Adaptor("UrlAdaptor");
                }).Columns(c =>
                {    
                    c.Field("Description").HeaderText("Description").Template("#documentsDescriptionTemplate").Width("200").Add();
                    c.Field("Date").HeaderText("Date").Template("#documentsDateTemplate").Width("150").Add();
                    c.HeaderText("Actions").Template("#documentsActionsTemplate").Width("170").Add();
                }).AllowPaging().PageSettings(p => p.PageSize(5)).Render()
            </div>
        </div>
    </div>
</div>

<div id="NewCertModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">New Certificate - @Model.Staff.Person.LastName, @Model.Staff.Person.FirstName</h4>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true"></span>&times;
                </button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = Url.HttpRouteUrl("ApiPersonnelCreateTrainingCertificate", new {}), HttpMethod = "POST", OnSuccess = "createCertificateSuccess", OnFailure = "createCertificateError"}, new {id = "newCertForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Training Course")
                        @Html.DropDownListFor(l => l.TrainingCertificate.CourseId, new SelectList(Model.TrainingCourses, "Id", "Description"), "Select Course", new {@class = "form-control", Name = "CourseId"})
                        @Html.ValidationMessageFor(x => x.TrainingCertificate.CourseId)
                    </div>
                    <div class="form-group">
                        @Html.Label("Completion Status")
                        @Html.EnumDropDownListFor(l => l.TrainingCertificate.Status, "Select Status", new {@class = "form-control", Name = "Status"})
                        @Html.ValidationMessageFor(l => l.TrainingCertificate.Status)
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(l => l.TrainingCertificate.StaffId, new {Value = Model.Staff.Id, Name = "PersonId"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>


<div id="NewObservationModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">New Observation - @Model.Staff.Person.LastName, @Model.Staff.Person.FirstName</h4>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true"></span>&times;
                </button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = Url.HttpRouteUrl("ApiPersonnelCreateObservation", new {}), HttpMethod = "POST", OnSuccess = "createObservationSuccess", OnFailure = "createObservationError"}, new {id = "newObservationForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Observed By")
                        <select class="form-control" id="newObserverSelect" name="ObserverId">
                        </select>
                    </div>
                    <div class="form-group">
                        @Html.Label("Overall Outcome")
                        @Html.DropDownListFor(l => l.PersonnelObservation.Outcome, new SelectList(Model.ObservationOutcomes), "Select Outcome", new {@class = "form-control", Name = "Outcome"})
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(l => l.PersonnelObservation.ObserveeId, new {Value = Model.Staff.Id, Name = "ObserveeId"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>


<div id="EditCertModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Certificate - @Model.Staff.Person.LastName, @Model.Staff.Person.FirstName</h4>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true"></span>&times;
                </button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = Url.HttpRouteUrl("ApiPersonnelUpdateTrainingCertificate", new {}), HttpMethod = "POST", OnSuccess = "editCertificateSuccess", OnFailure = "editCertificateError"}, new {id = "EditCertForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Training Course")
                        @Html.TextBox("display", null, new {@class = "form-control", id = "EditCertCourseDisplay", @readonly = ""})
                        @Html.HiddenFor(l => l.TrainingCertificate.CourseId, new {id = "EditCertCourseControl", Name = "CourseId"})
                    </div>
                    <div class="form-group">
                        @Html.Label("Completion Status")
                        @Html.EnumDropDownListFor(l => l.TrainingCertificate.Status, "Select Status", new {@class = "form-control", Name = "Status"})
                        @Html.ValidationMessageFor(l => l.TrainingCertificate.Status)
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(l => l.TrainingCertificate.StaffId, new {Value = Model.Staff.Id, Name = "PersonId", id = "EditCertStaffControl"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>


<div id="EditStaffModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Staff</h4>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="false"></span>&times;
                </button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = Url.HttpRouteUrl("ApiPeopleUpdateStaffMember", new {}), HttpMethod = "POST", OnSuccess = "editStaffSuccess", OnFailure = "editStaffError"}, new {id = "EditStaffForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Title")
                        @Html.DropDownListFor(x => x.Staff.Person.Title, new SelectList(Model.Titles), "Select Title", new {@class = "form-control", Name = "Title", id = "EditStaffTitle"})
                        @Html.ValidationMessageFor(x => x.Staff.Person.Title)
                    </div>
                    <div class="form-group">
                        @Html.Label("First Name")
                        @Html.TextBoxFor(x => x.Staff.Person.FirstName, new {@class = "form-control", Name = "FirstName", id = "EditStaffFirstName"})
                        @Html.ValidationMessageFor(x => x.Staff.Person.FirstName)
                    </div>
                    <div class="form-group">
                        @Html.Label("Last Name")
                        @Html.TextBoxFor(x => x.Staff.Person.LastName, new {@class = "form-control", Name = "LastName", id = "EditStaffLastName"})
                        @Html.ValidationMessageFor(x => x.Staff.Person.LastName)
                    </div>
                    <div class="form-group">
                        @Html.Label("Staff Code")
                        @Html.TextBoxFor(x => x.Staff.Code, new {@class = "form-control", Name = "Code", id = "EditStaffCode"})
                        @Html.ValidationMessageFor(x => x.Staff.Code)
                    </div>
                    <div class="form-group">
                        @Html.Label("Job Title")
                        @Html.TextBoxFor(x => x.Staff.JobTitle, new {@class = "form-control", Name = "JobTitle", id = "EditStaffJobTitle"})
                        @Html.ValidationMessageFor(x => x.Staff.JobTitle)
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>


<div id="NewDocumentModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">New Document - @Model.Staff.Person.LastName, @Model.Staff.Person.FirstName</h4>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true"></span>&times;
                </button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = Url.HttpRouteUrl("ApiDocumentsCreatePersonalDocument",new {}), HttpMethod = "POST", OnSuccess = "createDocumentSuccess", OnFailure = "createDocumentError"}, new {id = "newDocumentForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Description")
                        @Html.TextBoxFor(x => x.Upload.Document.Description, new {@class = "form-control", Name = "Document.Description"})
                        @Html.ValidationMessageFor(x => x.Upload.Document.Description)
                    </div>
                    <div class="form-group">
                        @Html.Label("URL")
                        @Html.TextBoxFor(x => x.Upload.Document.Url, new {@class = "form-control", Name = "Document.Url"})
                        @Html.ValidationMessageFor(x => x.Upload.Document.Url)
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(x => x.Upload.PersonId, new {@class = "form-control", Value = Model.Staff.Person.Id, Name = "PersonId"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


<div id="EditDocumentModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Document - @Model.Staff.Person.LastName, @Model.Staff.Person.FirstName</h4>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true"></span>&times;
                </button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = Url.HttpRouteUrl("ApiDocumentsUpdatePersonalDocument", new {}), HttpMethod = "POST", OnSuccess = "editDocumentSuccess", OnFailure = "editDocumentError"}, new {id = "editDocumentForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Description")
                        @Html.TextBoxFor(x => x.Upload.Document.Description, new {@class = "form-control", Name = "Document.Description", id = "EditDocumentDescription"})
                        @Html.ValidationMessageFor(x => x.Upload.Document.Description)
                    </div>
                    <div class="form-group">
                        @Html.Label("URL")
                        @Html.TextBoxFor(x => x.Upload.Document.Url, new {@class = "form-control", Name = "Document.Url", id = "EditDocumentUrl"})
                        @Html.ValidationMessageFor(x => x.Upload.Document.Url)
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(x => x.Upload.PersonId, new {@class = "form-control", Value = Model.Staff.Person.Id, Name = "PersonId", id = "EditDocumentStaffId"})
                        @Html.HiddenFor(x => x.Upload.Id, new {@class = "form-control", Name = "Id", id = "EditDocumentId"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


<div id="EditObservationModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Observation - @Model.Staff.Person.LastName, @Model.Staff.Person.FirstName</h4>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true"></span>&times;
                </button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = Url.HttpRouteUrl("ApiPersonnelUpdateObservation", new {}), HttpMethod = "POST", OnSuccess = "editObservationSuccess", OnFailure = "editObservationError"}, new {id = "editObservationForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        <label>Observed By</label>
                        <select class="form-control" id="editObserverSelect" name="ObserverId">
                        </select>
                    </div>
                    <div class="form-group">
                        @Html.Label("Overall Outcome")
                        @Html.DropDownListFor(l => l.PersonnelObservation.Outcome, new SelectList(Model.ObservationOutcomes), "Select Outcome", new {@class = "form-control", Name = "Outcome", id = "EditObservationOutcome"})
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(l => l.PersonnelObservation.ObserveeId, new {Value = Model.Staff.Id, Name = "ObserveeId", id = "EditObservationObservee"})
                        @Html.HiddenFor(x => x.PersonnelObservation.Id, new {Name = "Id", id = "EditObservationId"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

@section scripts
{
    <script>

        var urlDeleteStaffMember = "@Url.HttpRouteUrl("ApiPeopleDeleteStaffMember", new {staffId = 9999})";
        var urlGetCertificate = "@Url.HttpRouteUrl("ApiPersonnelGetTrainingCertificate", new {staffId = 9999, courseId = 8888})";
        var urlGetPersonalDocumentById =
            "@Url.HttpRouteUrl("ApiDocumentsGetPersonalDocumentById", new {documentId = 9999})";
        var urlGetObservationById = "@Url.HttpRouteUrl("ApiPersonnelGetObservationById", new {observationId = 9999})";
        var urlDeleteDocument = "@Url.HttpRouteUrl("ApiDocumentsDeletePersonalDocument", new {documentId = 9999})";
        var urlDeleteCertificate = "@Url.HttpRouteUrl("ApiPersonnelDeleteTrainingCertificate", new {staffId = 9999, courseId = 8888})";
        var urlDeleteObservation = "@Url.HttpRouteUrl("ApiPersonnelDeleteObservation", new {observationId = 9999})";
        var urlGetAllStaff = "@Url.HttpRouteUrl("ApiPeopleGetAllStaffMembers", new {})";

        $(document).ready(function() {

            
            $('.modal').on('hidden.bs.modal',
                function() {
                    $(this).find('form').trigger('reset');
                });
           
            $("#EditDetailsButton").on("click",
                function() {
                    $("#EditStaffTitle").val("@Model.Staff.Person.Title");
                    $("#EditStaffFirstName").val("@Model.Staff.Person.FirstName");
                    $("#EditStaffLastName").val("@Model.Staff.Person.LastName");
                    $("#EditStaffCode").val("@Model.Staff.Code");
                    $("#EditStaffJobTitle").val("@Model.Staff.JobTitle");
                    $("#EditStaffId").val("@Model.Staff.Id");

                    $("#EditStaffModal").modal('toggle');
                });

            $("#DeleteStaffButton").on("click",
                function() {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this staff member?",
                        function(result) {
                            if (result) {
                                $.ajax({
                                    url: urlDeleteStaffMember.replace("9999", button.attr("data-staff-id")),
                                    method: "DELETE",
                                    success: function(a) {
                                        location.replace("@Url.Action("Staff", "Home")");
                                        toastr.success(a);
                                    },
                                    error: function(a) {
                                        toastr.error(a.responseJSON);
                                    }
                                });
                            }
                        });
                });                                    
            
            $("#Training").on("click",
                ".js-edit",
                function() {
                    var button = $(this);
                    var courseId = button.attr("data-course-id");
                    var staffId = "@Model.Staff.Id";
                    $.ajax({
                        url: urlGetCertificate.replace("9999", staffId).replace("8888", courseId),
                        method: "GET",
                        success: function(result) {
                            $("#EditCertCourseDisplay").val(result["trainingCourse"].description);
                            $("#EditCertCourseControl").val(result["courseId"]);
                            $("#EditCertStatusControl").val(result["statusId"]);
                            $("#EditCertStaffControl").val(result["staffId"]);
                        },
                        error: function() {
                            toastr.error("Failed to load certificate data");
                        }
                    });
                    populateEditObserverSelection();
                    $("#EditCertModal").modal('toggle');
                });

            $("#Documents").on("click",
                ".js-edit",
                function() {
                    var button = $(this);
                    var documentId = button.attr("data-document-id");
                    $.ajax({
                        url: urlGetPersonalDocumentById.replace("9999", documentId),
                        method: "GET",
                        success: function(result) {
                            $("#EditDocumentDescription").val(result["document"].description);
                            $("#EditDocumentUrl").val(result["document"].url);
                            $("#EditDocumentStaffId").val(result["staffId"]);
                            $("#EditDocumentId").val(result["id"]);
                        },
                        error: function() {
                            toastr.error("Failed to load certificate data");
                        }
                    });
                    $("#EditDocumentModal").modal('toggle');
                });

            $("#Observations").on("click",
                ".js-edit",
                function() {
                    var button = $(this);
                    var observationId = button.attr("data-observation-id");
                    $.ajax({
                        url: urlGetObservationById.replace("9999", observationId),
                        method: "GET",
                        success: function(result) {
                            $("#EditObservationDate").val(result["date"].toLocaleDateString);
                            $("#EditObservationOutcome").val(result["outcome"]);
                            $("#EditObservationObservee").val(result["observeeId"]);
                            populateEditObserverSelection(result["observerId"]);
                            $("#EditObservationId").val(result["id"]);
                        },
                        error: function() {
                            toastr.error("Failed to load certificate data");
                        }
                    });
                    $("#EditObservationModal").modal('toggle');
                });
                       
            $("#Documents").on("click",
                ".js-delete",
                function() {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this document?",
                        function(result) {
                            if (result) {
                                $.ajax({
                                    url: urlDeleteDocument.replace("9999", button.attr("data-document-id")),
                                    method: "DELETE",
                                    success: function(ajaxResult) {
                                        refreshTable("Documents");
                                        toastr.success(ajaxResult);
                                    },
                                    error: function(ajaxResult) {
                                        toastr.error(ajaxResult.responseJSON);
                                    }
                                });
                            }
                        });
                });
            
            $("#Training").on("click",
                ".js-delete",
                function() {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this certificate?",
                        function(result) {
                            if (result) {
                                $.ajax({
                                    url: urlDeleteCertificate.replace("9999", $("#certs").attr("data-staff-id")).replace("8888", button.attr("data-course-id")),
                                    method: "DELETE",
                                    success: function(a) {
                                        toastr.success(a);
                                        $("#certs").DataTable().ajax.reload();
                                    },
                                    error: function(a) {
                                        toastr.error(a.responseJSON);
                                    }
                                });
                            }
                        });
                });

            $("#Observations").on("click",
                ".js-delete",
                function() {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this observation?",
                        function(result) {
                            if (result) {
                                $.ajax({
                                    url: urlDeleteObservation.replace("9999", button.attr("data-observation-id")),
                                    method: "DELETE",
                                    success: function(ajaxResult) {
                                        $("#observations").DataTable().ajax.reload();
                                        toastr.success(ajaxResult);
                                    },
                                    error: function(ajaxResult) {
                                        toastr.error(ajaxResult.responseJSON);
                                    }
                                });
                            }
                        });
                });
            
        });

        
        function createObservationSuccess(result) {
            $("#NewObservationModal").modal('hide');
            toastr.success(result);
            refreshTable("Observations");
        }

        function createObservationError(result) {
            $("#NewObservationModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        
        
        function editObservationSuccess(result) {
            $("#EditObservationModal").modal('hide');
            toastr.success(result);
            refreshTable("Observations");
        }

        function editObservationError(result) {
            $("#EditObservationModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        
        
        function createDocumentSuccess(result) {
            $("#NewDocumentModal").modal('hide');
            toastr.success(result);
            refreshTable("Documents");
        }

        function createDocumentError(result) {
            $("#NewDocumentModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        
        
        function editDocumentSuccess(result) {
            $("#EditDocumentModal").modal('hide');
            toastr.success(result);
            refreshTable("Documents");
        }

        function editDocumentError(result) {
            $("#EditDocumentModal").modal('hide');
            toastr.error(result.responseJSON);
        }
        

        function createCertificateSuccess(result) {
            $("#NewCertModal").modal('hide');
            toastr.success(result);
            refreshTable("Training");
        }

        function createCertificateError(result) {
            $("#NewCertModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function editCertificateSuccess(result) {
            $("#EditCertModal").modal('hide');
            toastr.success(result);
            refreshTable("Training");
        }

        function editCertificateError(result) {
            $("#EditCertModal").modal('hide');
            toastr.error(result.responseJSON);
        }
        
        function observationsRowFunction(args) {
            if (args.data['Outcome'] === "Outstanding") {
                args.row.classList.add("mp-observation-outstanding");
            }
            else if (args.data['Outcome'] === "Good") {
                args.row.classList.add("mp-observation-good");
            }
            else if (args.data['Outcome'] === "Satisfactory") {
                args.row.classList.add("mp-observation-satisfactory");
            }
            else if (args.data['Outcome'] === "Inadequate") {
                args.row.classList.add("mp-observation-inadequate");
            }
        }
        
        function trainingRowFunction(args) {
            if (args.data['Status'] === "Completed") {
                args.row.classList.add("mp-cert-completed");
            }
            else if (args.data['Status'] === "Pending") {
                args.row.classList.add("mp-cert-pending");
            }
            else if (args.data['Status'] === "Failed") {
                args.row.classList.add("mp-cert-failed");
            }
        }

        function populateNewObserverSelection() {
            $.ajax({
                url: urlGetAllStaff,
                method: "GET",
                complete: function(data) {
                    $("#newObserverSelect").empty();
                    var divInit = "<option value class=\"hidden disabled\">Select Observer</option>";
                    $(divInit).appendTo("#newObserverSelect");
                    $(data.responseJSON).each(function(i, staff) {
                        var divData = "<option value=" +
                            data.responseJSON[i].id +
                            ">" +
                            data.responseJSON[i].person.lastName +
                            ", " +
                            data.responseJSON[i].person.firstName +
                            "</option>";

                        $(divData).appendTo("#newObserverSelect");
                    });
                    if ($("#observations").attr("data-current-id") !== 0) {
                        $("#newObserverSelect").val($("#observations").attr("data-current-id"));
                        $("#NewObservationModal").modal('toggle');
                        return;
                    }
                    $("#NewObservationModal").modal('toggle');
                }
            });
        }

        function populateEditObserverSelection(observer) {
            $.ajax({
                url: urlGetAllStaff,
                method: "GET",
                complete: function(data) {
                    $("#editObserverSelect").empty();
                    var divInit = "<option value class=\"hidden disabled\">Select Observer</option>";
                    $(divInit).appendTo("#editObserverSelect");
                    $(data.responseJSON).each(function(i, staff) {
                        var divData = "<option value=" +
                            data.responseJSON[i].id +
                            ">" +
                            data.responseJSON[i].person.lastName +
                            ", " +
                            data.responseJSON[i].person.firstName +
                            "</option>";

                        $(divData).appendTo("#editObserverSelect");
                        $("#editObserverSelect").val(observer);
                    });
                }
            });
        }

        
        function editStaffSuccess(result) {
            $("#EditDetailsModal").modal('hide');
            toastr.success(result);
            location.reload();
        }

        function editStaffError(result) {
            $("#EditDetailsModal").modal('hide');
            toastr.error(result.responseJSON);
        }

    </script>
    
    <script type="text/x-jsrender" id="documentsDescriptionTemplate">
            <div>
                ${Description}
            </div>
        </script>
    
    <script type="text/x-jsrender" id="documentsDateTemplate">
            <div>
                ${formatDate(Date.toString())}
            </div>
        </script>
    
    <script type="text/x-jsrender" id="documentsActionsTemplate">
                <div>
                    <button type='button' class='btn btn-xs btn-warning mp-btn-action js-edit' data-document-id="${Id}">
                        <i class="far fa-edit"></i>
                    </button>
                    
                    <button type='button' class='btn btn-xs btn-danger mp-btn-action js-delete' data-document-id="${Id}">
                        <i class="far fa-trash-alt"></i>
                    </button>
                </div>
            </script>
    
    <script type="text/x-jsrender" id="observationsDateTemplate">
            <div>
                ${formatDate(Date.toString())}
            </div>
        </script>
    
        <script type="text/x-jsrender" id="observationsObserverTemplate">
            <div>
                ${ObserverName}
            </div>
        </script>
    
    <script type="text/x-jsrender" id="observationsOutcomeTemplate">
            <div>
                ${Outcome}
            </div>
        </script>
    
    <script type="text/x-jsrender" id="observationsActionsTemplate">
                    <div>
                       <button type='button' class='btn btn-xs btn-warning mp-btn-action js-edit' data-observation-id="data">
                           <i class="far fa-edit"></i>
                       </button>
                       
                       <button type='button' class='btn btn-xs btn-danger mp-btn-action js-delete' data-observation-id="data">
                           <i class="far fa-trash-alt"></i>
                       </button>
                    </div>
                </script>
    
    <script type="text/x-jsrender" id="trainingCodeTemplate">
            <div>
                ${CourseCode}
            </div>
        </script>
    
        <script type="text/x-jsrender" id="trainingDescriptionTemplate">
            <div>
                ${CourseDescription}
            </div>
        </script>
    
    <script type="text/x-jsrender" id="trainingStatusTemplate">
            <div>
                ${Status}
            </div>
        </script>
    
        <script type="text/x-jsrender" id="trainingActionsTemplate">
                        <div>
                           <button type='button' class='btn btn-xs btn-warning mp-btn-action js-edit' data-course-id="data">
                               <i class="far fa-edit"></i>
                           </button>
                           
                           <button type='button' class='btn btn-xs btn-danger mp-btn-action js-delete' data-course-id="data">
                               <i class="far fa-trash-alt"></i>
                           </button>
                        </div>
                    </script>

    @Scripts.Render("~/bundles/jqueryval")
    
}