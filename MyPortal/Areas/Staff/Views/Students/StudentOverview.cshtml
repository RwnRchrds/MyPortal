@using MyPortal.BusinessLogic.Extensions
@using MyPortal.Extensions
@using MyPortal.Services
@using Syncfusion.EJ2.Grids
@model MyPortal.Areas.Staff.ViewModels.StudentOverviewViewModel
@{
    ViewBag.Title = $"Student Overview";
    ViewBag.DisplayTitle = "Student Overview";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">@Model.Student.Person.GetDisplayName()</h1>
</div>

<div class="row">
    
    <div class="col-xl-12 col-md-12 mb-4">
        <div class="dropdown inline-block">
            <button class="btn btn-sm btn-primary px-3 dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fas fa-user-graduate"></i> Student
            </button>

            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                @if (User.HasPermission("EditStudents"))
                {
                    <h6 class="dropdown-header">@Model.Student.Person.GetDisplayName()</h6>
                }
                <a href="@Url.Action("StudentDetails", new {studentId = Model.Student.Id})" class="dropdown-item">Details</a>
                <a href="@Url.Action("BehaviourManagement", new {studentId = Model.Student.Id})" class="dropdown-item">Behaviour Management</a>
                <a href="@Url.Action("StudentResults", new {studentId = Model.Student.Id})" class="dropdown-item">Assessment</a>
            </div>
        </div>
    </div>
    
</div>

<div class="row">

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-primary shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Account Balance</div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">
                            £@Model.Student.AccountBalance
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-pound-sign fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card shadow h-100 py-2" id="attendanceBlock">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Attendance (Present + AEA)</div>
                        @if (Model.HasAttendanceData && Model.Attendance != null)
                        {
                            <div class="h5 mb-0 font-weight-bold text-gray-800" data-hasdata="true" id="attendanceDetail">
                                @Model.Attendance%
                            </div>
                        }
                        else
                        {
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="attendanceDetail">
                                --
                            </div>
                        }
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-calendar fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card shadow h-100 py-2" id="achievementBlock">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Achievement Points</div>
                        @if (Model.AchievementCount.HasValue)
                        {
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="achievementDetail">
                                @Model.AchievementCount
                            </div>
                        }
                        else
                        {
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="achievementDetail">
                                --
                            </div>
                        }
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-smile fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card shadow h-100 py-2" id="behaviourBlock">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Behaviour Points</div>
                        @if (Model.BehaviourCount.HasValue)
                        {
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="behaviourDetail">
                                @Model.BehaviourCount
                            </div>
                        }
                        else
                        {
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="behaviourDetail">
                                --
                            </div>
                        }
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-frown fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-3">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Basic Details</h6>
            </div>

            <div class="card-body">
                <div class="col-lg-12 text-sm">
                    <div class="row">
                        <div class="col-lg-6 pb-3">
                            <div class="font-weight-bold text-primary mb-0">Name</div>
                            <div class="font-weight-bold text-gray-800 mb-0">@Model.Student.Person.FirstName @Model.Student.Person.LastName</div>
                        </div>
                        @if (Model.Student.Person.Dob != null)
                        {
                            <div class="col-lg-6 pb-3">
                                <div class="font-weight-bold text-primary mb-0">Date of Birth</div>
                                <div class="font-weight-bold text-gray-800 mb-0">@Model.Student.Person.Dob.Value.ToDisplayString()</div>
                            </div>
                        }
                    </div>
                    <div class="row">
                        <div class="col-lg-6 pb-3">
                            <div class="font-weight-bold text-primary mb-0">Year Group</div>
                            <div class="font-weight-bold text-gray-800 mb-0">@Model.Student.YearGroup.Name</div>
                        </div>
                        <div class="col-lg-6 pb-3">
                            <div class="font-weight-bold text-primary mb-0">Head of Year</div>
                            <div class="font-weight-bold text-gray-800 mb-0">@Model.Student.YearGroup.HeadOfYear.GetDisplayName()</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 pb-3">
                            <div class="font-weight-bold text-primary mb-0">Reg Group</div>
                            <div class="font-weight-bold text-gray-800 mb-0">@Model.Student.RegGroup.Name</div>
                        </div>
                        <div class="col-lg-6 pb-3">
                            <div class="font-weight-bold text-primary mb-0">Reg Tutor</div>
                            <div class="font-weight-bold text-gray-800 mb-0">@Model.Student.RegGroup.Tutor.GetDisplayName()</div>
                        </div>
                    </div>
                    @if (Model.Student.House != null)
                    {
                        <div class="row">
                            <div class="col-lg-6 pb-3">
                                <div class="font-weight-bold text-primary mb-0">House</div>
                                <div class="font-weight-bold text-gray-800 mb-0">@Model.Student.House.Name</div>
                            </div>
                            <div class="col-lg-6 pb-3">
                                <div class="font-weight-bold text-primary mb-0">Head of House</div>
                                <div class="font-weight-bold text-gray-800 mb-0">@Model.Student.House.HeadOfHouse.GetDisplayName()</div>
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="font-weight-bold text-primary mb-0">Pupil Premium</div>
                            <div class="font-weight-bold text-gray-800 mb-0">@Model.Student.PupilPremium</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Timetable</h6>
            </div>

            <div class="card-body">

            </div>
        </div>
    </div>

    <div class="col-lg-3">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Assessment Key Indicators</h6>
            </div>

            <div class="card-body">

            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Log Notes</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                
                <div class="mb-4">
                    
                    <button type="button" class="btn btn-sm btn-primary" data-toggle="modal" data-target="#NewLogNoteModal">
                        <i class="fa fa-plus"></i> New Log Note
                    </button>

                </div>

                @Html.EJS().Grid("logs").DataSource(dataManager => { dataManager.Url(Url.HttpRouteUrl("ApiGetProfileLogNotesByStudentDataGrid", new{studentId = Model.Student.Id})).CrossDomain(false).Adaptor("UrlAdaptor"); }).Columns(c =>
                {
                    c.Field("Date").HeaderText("Date").Template("#logDateTemplate").Width("120").Add();
                    c.Field("AuthorName").HeaderText("Author").Template("#logAuthorTemplate").Width("150").Add();
                    c.Field("LogTypeName").HeaderText("Log Type").Template("#logTypeTemplate").Width("150").Add();
                    c.Field("Message").HeaderText("Note").Width("500").Template("#logMessageTemplate").Add();
                    c.HeaderText("Actions").Template("#logActionsTemplate").Width("170").Add();
                }).AllowPaging().AllowTextWrap().PageSettings(p => p.PageSize(5)).TextWrapSettings(w => { w.WrapMode(WrapMode.Content); }).EnableHover(false).Render()
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Documents</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                
                <div class="mb-4">
                    
                    <button type="button" class="btn btn-sm btn-primary" data-toggle="modal" data-target="#NewAttachmentModal">
                        <i class="fa fa-plus"></i> New Document
                    </button>

                </div>

                @Html.EJS().Grid("documents").DataSource(dataManager => { dataManager.Url(Url.HttpRouteUrl("ApiGetAttachmentsByPersonDataGrid", new {personId = Model.Student.Person.Id})).CrossDomain(false).Adaptor("UrlAdaptor"); }).Columns(c =>
                {
                    c.Field("Date").HeaderText("Date").Template("#docsDateTemplate").Width("120").Add();
                    c.Field("Description").HeaderText("Description").Template("#docsDescriptionTemplate").Width("200").Add();
                    c.HeaderText("Actions").Template("#docsActionsTemplate").Add();
                }).AllowPaging().PageSettings(p => p.PageSize(5)).Render()
            </div>
        </div>
    </div>
</div>

<div id="NewLogNoteModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg" role="document">

        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">New Log Note - @Model.Student.Person.LastName, @Model.Student.Person.FirstName</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = Url.HttpRouteUrl("ApiCreateProfileLogNote", new {}), HttpMethod = "POST", OnSuccess = "newLogNoteSuccess", OnFailure = "newLogNoteFailure"}, new {id = "NewLogNoteForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Log Type")
                        @Html.DropDownListFor(l => l.LogNote.TypeId, new SelectList(Model.LogTypes, "Key", "Value"), "Select Log Note Type", new {@class = "form-control form-control-sm", Name = "TypeId"})
                        @Html.ValidationMessageFor(l => l.LogNote.TypeId)
                    </div>
                    <hr/>
                    <button type="button" class="btn btn-sm btn-primary" id="addComment"><i class="fa fa-plus"></i> Add Comment</button>
                    <hr/>
                    <div class="form-group">
                        @Html.Label("Message")
                        @Html.TextAreaFor(l => l.LogNote.Message, new {@class = "form-control form-control-sm mw-100", rows = 8, Name = "Message", id = "newLogNoteMessageControl"})
                        @Html.ValidationMessageFor(l => l.LogNote.Message)
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(l => l.LogNote.StudentId, new {Value = Model.Student.Id, Name = "StudentId", id="newLogNoteStudentId"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-sm btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-sm btn-primary">Save</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<div id="EditLogNoteModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">

        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Log Note - @Model.Student.Person.LastName, @Model.Student.Person.FirstName</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = Url.HttpRouteUrl("ApiUpdateProfileLogNote", new {}), HttpMethod = "POST", OnSuccess = "editLogNoteSuccess", OnFailure = "editLogNoteFailure"}, new {id = "EditLogNoteForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Log Type")
                        @Html.DropDownListFor(l => l.LogNote.TypeId, new SelectList(Model.LogTypes, "Key", "Value"), "Select Log Note Type", new {@class = "form-control form-control-sm", id = "EditLogNoteTypeControl", Name = "TypeId"})
                    </div>
                    <div class="form-group">
                        @Html.Label("Message")
                        @Html.TextAreaFor(l => l.LogNote.Message, new {@class = "form-control form-control-sm mw-100", id = "EditLogNoteMessageControl", rows = 8, Name = "Message"})
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(l => l.LogNote.StudentId, new {Value = Model.Student.Id, Name = "StudentId"})
                        @Html.HiddenFor(l => l.LogNote.Id, new {Name = "Id", id = "EditLogNoteIdControl"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-sm btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" id="EditLogSave" class="btn btn-sm btn-primary">Save</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<div id="NewAttachmentModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">New Document - @Model.Student.Person.LastName, @Model.Student.Person.FirstName</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = Url.HttpRouteUrl("ApiCreatePersonAttachment", new{}), HttpMethod = "POST", OnSuccess = "newAttachmentSuccess", OnFailure = "newAttachmentFailure"}, new {id = "newAttachmentForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Description")
                        @Html.TextBoxFor(x => x.Attachment.Document.Description, new {@class = "form-control form-control-sm mw-100", Name = "Document.Description"})
                        @Html.ValidationMessageFor(x => x.Attachment.Document.Description)
                    </div>
                    <div class="form-group">
                        @Html.Label("URL")
                        @Html.TextBoxFor(x => x.Attachment.Document.Url, new {@class = "form-control form-control-sm mw-100", Name = "Document.Url"})
                        @Html.ValidationMessageFor(x => x.Attachment.Document.Url)
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(x => x.Attachment.PersonId, new {@class = "form-control", Value = Model.Student.Person.Id, Name = "PersonId"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-sm btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-sm btn-primary">Save</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div id="EditAttachmentModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Document - @Model.Student.Person.LastName, @Model.Student.Person.FirstName</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = Url.HttpRouteUrl("ApiUpdatePersonAttachment", new {}), HttpMethod = "POST", OnSuccess = "editAttachmentSuccess", OnFailure = "editAttachmentFailure"}, new {id = "editAttachmentForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Description")
                        @Html.TextBoxFor(x => x.Attachment.Document.Description, new {@class = "form-control form-control-sm mw-100", Name = "Document.Description", id = "EditAttachmentDocumentDescriptionControl"})
                        @Html.ValidationMessageFor(x => x.Attachment.Document.Description)
                    </div>
                    <div class="form-group">
                        @Html.Label("URL")
                        @Html.TextBoxFor(x => x.Attachment.Document.Url, new {@class = "form-control form-control-sm mw-100", Name = "Document.Url", id = "EditAttachmentDocumentUrlControl"})
                        @Html.ValidationMessageFor(x => x.Attachment.Document.Url)
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(x => x.Attachment.Document.Id, new {Name = "Document.Id", id = "EditAttachmentDocumentIdControl"})
                        @Html.HiddenFor(x => x.Attachment.Id, new {Name = "Id", id = "EditAttachmentIdControl"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-sm btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-sm btn-primary">Save</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div id="AddCommentModal" class="modal fade" role="dialog">
    <div class="modal-dialog" role="document">

        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add Comment to Log</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    @Html.Label("Comment Bank")
                    @Html.DropDownList("SelectedStatus", new SelectList(Model.CommentBanks, "Key", "Value"), "Select Comment Bank", new {@class = "form-control", Name = "Id", id = "selectedBank"})
                </div>

                <div class="container">
                    <table class="table table-bordered table-hover mp-table" id="comments">
                        <thead>
                        <tr>
                            <th>Comment</th>
                            <th>Actions</th>
                        </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary" data-dismiss="modal">Back</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script>

        var urlDeleteLogNote = "@Url.HttpRouteUrl("ApiDeleteProfileLogNote", new {logId = 9999})";
        var urlGetLogNoteById = "@Url.HttpRouteUrl("ApiGetProfileLogNoteById", new{logId = 9999})";
        var urlDeletePersonAttachment = "@Url.HttpRouteUrl("ApiDeletePersonAttachment", new{documentId = 9999})";
        var urlGetPersonAttachmentById = "@Url.HttpRouteUrl("ApiGetPersonAttachmentById", new {documentId = 9999})";

        $(document).ready(function() {
            overviewCalc();
            $("#logs").on("click",
                ".js-delete",
                function() {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this log note?",
                        function(result) {
                            if (result) {
                                $.ajax({
                                    url: urlDeleteLogNote.replace("9999", button.attr("data-log-id")),
                                    method: "DELETE",
                                    success: function(result) {
                                        refreshTable("logs");
                                        toastr.success(result);
                                    },
                                    error: function(result) {
                                        toastr.error(result.responseJSON);
                                    }
                                });
                            }
                        });
                });

            $("#documents").on("click",
                ".js-delete",
                function() {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this document?",
                        function(result) {
                            if (result) {
                                $.ajax({
                                    url: urlDeletePersonAttachment.replace("9999", button.attr("data-document-id")),
                                    method: "DELETE",
                                    success: function(ajaxResult) {
                                        refreshTable("documents");
                                        toastr.success(ajaxResult);
                                    },
                                    error: function(ajaxResult) {
                                        toastr.error(ajaxResult.responseJSON);
                                    }
                                });
                            }
                        });
                });

            $('.modal').on('hidden.bs.modal',
                function() {
                    $(this).find('form').trigger('reset');
                });

            $("#AddCommentModal").on('hidden.bs.modal',
                function() {
                    $("#comments").DataTable().clear().destroy();
                    $("#selectedBank").prop("selectedIndex", 0);
                });

            $("#NewLogModal").on('hidden.bs.modal',
                function() {
                    $("#newLogMessageControl").val("");
                });

            $("#addComment").on("click",
                function() {
                    $("#AddCommentModal").modal('toggle');
                });

            $('#AddCommentModal').on('shown.bs.modal',
                function() {
                    loadComments();
                });

            $("#comments").on("click",
                ".js-add",
                function() {
                    var message = $(this).parent().siblings(":first").text();
                    $("#newLogMessageControl").val(function(i, val) {
                        return val + message;
                    });
                    toastr.success("Added comment to log");
                    $("#AddCommentModal").modal('hide');
                });

            $("#selectedBank").on("change",
                function() {
                    $("#comments").DataTable().clear().destroy();
                    loadComments();
                });


            $("#logs").on("click",
                ".js-edit",
                function() {
                    var button = $(this);
                    var logId = button.attr("data-log-id");
                    $.ajax({
                        url: urlGetLogNoteById.replace("9999", logId),
                        method: "GET",
                        success: function(result) {
                            $("#EditLogNoteTypeControl").val(result["typeId"]);
                            $("#EditLogNoteMessageControl").val(result["message"]);
                            $("#EditLogNoteIdControl").val(result["id"]);
                            $("#EditLogNoteModal").modal('toggle');
                        },
                        error: function() {
                            toastr.error("Failed to load log note data");
                        }
                    });
                });

            $("#documents").on("click",
                ".js-edit",
                function() {
                    var button = $(this);
                    var docId = button.attr("data-document-id");
                    $.ajax({
                        url: urlGetPersonAttachmentById.replace(9999, docId),
                        method: "GET",
                        success: function (result) {
                            $("#EditAttachmentDocumentDescriptionControl").val(result["document"].description);
                            $("#EditAttachmentDocumentUrlControl").val(result["document"].url);
                            $("#EditAttachmentDocumentIdControl").val(result["document"].id);
                            $("#EditAttachmentIdControl").val(result["id"]);
                            $("#EditAttachmentModal").modal('toggle');
                        },
                        error: function() {
                            toastr.error("Failed to load attachment data");
                        }
                    });
                });
        });

        function newAttachmentSuccess(result) {
            $("#NewDocumentModal").modal('hide');
            refreshTable("documents");
            toastr.success(result);
        }

        function newAttachmentFailure(result) {
            $("#NewDocumentModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function editAttachmentSuccess(result) {
            $("#EditAttachmentModal").modal('hide');
            refreshTable("documents");
            toastr.success(result);
        }

        function editAttachmentFailure(result) {
            $("#EditAttachmentModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function editLogNoteSuccess(result) {
            $("#EditLogModal").modal('hide');
            refreshTable("logs");
            toastr.success(result);
        }

        function editLogNoteFailure(result) {
            $("#EditLogModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function newLogNoteSuccess(result) {
            $("#NewLogModal").modal('hide');
            refreshTable("logs");
            toastr.success(result);
        }

        function newLogNoteFailure(result) {
            $("#NewLogModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function loadComments() {
            var commentBank = $("#selectedBank").val();

            if (commentBank === "") {
                $("#comments").hide();
                return;
            }

            var url = `/api/profiles/comments/get/byBank/${commentBank}`;

            $("#comments").DataTable({
                ajax: {
                    url: url,
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "value",
                        render: function(data) {
                            return data.replace(/</g, "&lt;")
                                .replace(/>/g, "&gt;");
                        }
                    },
                    {
                        data: "id",
                        render: function(data) {
                            return `<button type='button' class='btn btn-xs btn-success js-add' data-comment-id=${data
                                }><i class="fas fa-plus"></i></button>`;
                        }
                    }
                ],
                paging: true,
                ordering: false,
                searching: false,
                responsive: true,
                info: false,
                lengthChange: false,
                pageLength: 5,
                "language": {
                    "emptyTable": "No comments to display"
                }
            });

            $("#comments").show();
        }

        function overviewCalc() {

            if ($("#attendanceDetail").attr("data-hasdata") === "true") {
                if (parseInt($("#attendanceDetail").text()) >= 95) {
                    $("#attendanceBlock").addClass("border-left-success");
                } else if (parseInt($("#attendanceDetail").text()) < 90) {
                    $("#attendanceBlock").addClass("border-left-danger");
                } else if (parseInt($("#attendanceDetail").text()) < 95) {
                    $("#attendanceBlock").addClass("border-left-warning");
                }
            }

            if (parseInt($("#achievementDetail").text()) < @Model.BehaviourCount) {
                $("#achievementBlock").addClass("border-left-danger");
            }
            if (parseInt($("#achievementDetail").text()) === @Model.BehaviourCount) {
                $("#achievementBlock").addClass("border-left-warning");
            }
            if (parseInt($("#achievementDetail").text()) > @Model.BehaviourCount) {
                $("#achievementBlock").addClass("border-left-success");
            }


            if (parseInt($("#behaviourDetail").text()) === 0) {
                $("#behaviourBlock").addClass("border-left-success");
            }
            if (parseInt($("#behaviourDetail").text()) > 9) {
                $("#behaviourBlock").addClass("border-left-danger");
            }
            if (parseInt($("#behaviourDetail").text()) > 0) {
                $("#behaviourBlock").addClass("border-left-warning");
            }
        }

        function renderLogMessage(data) {
            if ("@Model.Student.Person.Gender" === "M") {
                return data.replace(/<name>/g, "@Model.Student.Person.FirstName")
                    .replace(/<he>/g, "he")
                    .replace(/<He>/g, "He")
                    .replace(/<him>/g, "him")
                    .replace(/<Him>/g, "Him")
                    .replace(/<his>/g, "his")
                    .replace(/<His>/g, "His")
                    .replace(/<himself>/g, "himself")
                    .replace(/<Himself>/g, "Himself")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/\n/g, "<br/>");
            }

            if ("@Model.Student.Person.Gender" === "F") {
                return data.replace("<name>", "@Model.Student.Person.FirstName")
                    .replace(/<he>/g, "she")
                    .replace(/<He>/g, "She")
                    .replace(/<him>/g, "her")
                    .replace(/<Him>/g, "Her")
                    .replace(/<his>/g, "her")
                    .replace(/<His>/g, "Her")
                    .replace(/<himself>/g, "herself")
                    .replace(/<Himself>/g, "Herself")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/\n/g, "<br/>");
            }

            if ("@Model.Student.Person.Gender" === "X") {
                return data.replace("<name>", "@Model.Student.Person.FirstName")
                    .replace(/<he>/g, "they")
                    .replace(/<He>/g, "They")
                    .replace(/<him>/g, "them")
                    .replace(/<Him>/g, "Them")
                    .replace(/<his>/g, "their")
                    .replace(/<His>/g, "Their")
                    .replace(/<himself>/g, "themselves")
                    .replace(/<Himself>/g, "Themselves")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/\n/g, "<br/>");
            }

            return data;
        }

        function dataBoundLogs(args) {
            this.autoFitColumns(['Date', 'AuthorName', 'LogTypeName', 'Actions']);
        }

    </script>

    <script type="text/x-jsrender" id="logAuthorTemplate">
        <div>
            ${AuthorName}
        </div>
    </script>

    <script type="text/x-jsrender" id="logDateTemplate">
        <div>
            ${formatDate(Date.toString())}
        </div>
    </script>

    <script type="text/x-jsrender" id="logTypeTemplate">
        <div class="font-weight-bold">
            <span><span class="dot mr-2" style="background-color: ${LogTypeColourCode}"></span><div class="inline-block m-auto">${LogTypeName}</div></span>
        </div>
    </script>

    <script type="text/x-jsrender" id="logMessageTemplate">
        <div>
            ${renderLogMessage(Message.toString())}
        </div>
    </script>

    <script type="text/x-jsrender" id="logActionsTemplate">
        <div>
            <button type="button" class="btn btn-link js-edit font-weight-bold" data-log-id="${Id}">
                Edit
            </button>
            <button type="button" class="btn btn-link text-danger js-delete font-weight-bold" data-log-id="${Id}">
                Delete
            </button>
        </div>
    </script>

    <script type="text/x-jsrender" id="docsDescriptionTemplate">
        <div>
            <b><a href="${Url}" target="_blank">${Description}</a></b>
        </div>
    </script>


    <script type="text/x-jsrender" id="docsDateTemplate">
        <div>
            ${formatDate(Date.toString())}
        </div>
    </script>

    <script type="text/x-jsrender" id="docsActionsTemplate">
        <div>
            <button type="button" class="btn btn-link js-edit font-weight-bold" data-document-id="${Id}">
                Edit
            </button>
            <button type="button" class="btn btn-link js-delete text-danger font-weight-bold" data-document-id="${Id}">
                Delete
            </button>
        </div>
    </script>

    @Scripts.Render("~/bundles/jqueryval")
}