@using MyPortal.Extensions
@using MyPortal.Services
@model MyPortal.Areas.Staff.ViewModels.TakeRegisterViewModel
@{
    ViewBag.Title = $"Take Register: {Model.Session.Period.Name} - {Model.Session.Class.Name}";
    ViewBag.DisplayTitle = "Take Register";
}

<style>
    tr { font-weight: bold; }
</style>

@*<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Take Register</h1>
</div>*@

<div class="row">

    <div class="col-xl-12 col-md-12">

        <div class="form-group">
            <button type="button" class="btn btn-sm btn-primary" id="buttonBack"><i class="fas fa-arrow-left"></i> Back</button>
            <button type="button" class="btn btn-sm btn-primary" id="buttonSave"><i class="fas fa-cloud-upload-alt"></i> Save</button>
        </div>

    </div>

</div>

@if (User.HasPermission("EditAttendance"))
{
    <div class="row">

        <div class="col-xl-12 col-lg-12 mb-4">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary"><i class="fas fa-clipboard-check"></i> @Model.SessionDate.ToLongDateString() - @Model.Session.Class.Name (@Model.Session.Period.Name) - @Model.Session.Class.Teacher.GetDisplayName()</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    
                    <div class="mb-4">
                        <button type="button" class="btn btn-primary btn-sm"><i class="fas fa-receipt"></i> Codes</button>
                        <button type="button" class="btn btn-primary btn-sm" disabled><i class="fas fa-info-circle"></i> Details</button>
                    </div>

                    <table class="table table-bordered table-responsive text-sm" id="register">
                        <thead>
                        <tr>
                            <th scope="col">Student</th>
                            @foreach (var period in Model.Periods)
                            {
                                <th scope="col" class="text-center">@period.Name</th>
                            }
                        </tr>
                        </thead>
                        <tbody>
                        @for (var i = 0; i < Model.AttendanceMarks.Count(); i++)
                        {
                            var entry = Model.AttendanceMarks.ElementAt(i);
                            <tr>
                                <th scope="row" class="pl-2 pr-4 py-0">@entry.StudentName</th>
                                @foreach (var attendanceMark in entry.Marks)
                                {
                                    if (attendanceMark.PeriodId == Model.Session.PeriodId)
                                    {
                                        <td class="text-center p-0 align-middle register-current js-mark" data-student-id="@attendanceMark.StudentId" data-mark-id="@attendanceMark.Id" data-mins-late="@attendanceMark.MinutesLate" data-comments="@attendanceMark.Comments" tabindex="0">@attendanceMark.Mark</td>
                                    }
                                    else
                                    {
                                        <td class="text-center p-0 align-middle">@attendanceMark.Mark</td>
                                    }
                                }
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </div>

    <div id="additionalInfoModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Additional Information</h5>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"></span>&times;</button>
                    <form id="minutesLateForm">
                        <div class="modal-body">
                            <div class="form-group">
                                @Html.Label("Minutes Late")
                                @Html.TextBox("MinsLate", null, new {@class = "form-control form-control-sm"})
                            </div>
                            <div class="form-group">
                                @Html.Label("Comments")
                                @Html.TextArea("Comments", null, new {@class = "form-control form-control-sm"})
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@section scripts
{
    <script>

        var codes = @Html.Raw(Json.Encode(Model.UsableCodes));

        var saveRegisterUrl = "@Url.HttpRouteUrl("ApiSaveRegisterMarks", new {})";

        $(document).ready(function() {
            $("#buttonBack").on("click",
                function() {
                    location.replace("@Url.Action("Registers")");
                });

            $("td.js-mark:first").focus();

            $(".js-mark").on("keydown",
                function(e) {
                    switch (e.which) {
                    case 38:
                        prevMark();
                        e.preventDefault();
                        break;
                    case 40:
                        nextMark();
                        e.preventDefault();
                        break;
                    }
                });

            $(".js-mark").on("keypress",
                function(e) {
                    const attendanceCode = String.fromCharCode(e.which).toUpperCase();
                    updateMark(attendanceCode);
                });

            $("#buttonSave").on("click",
                function() {
                    saveRegister();
                });
        });

        function dataGridActionComplete(args) {
            if (args.requestType === "save") {
                refreshTable("Marks");
            }
        }

        function cellEdit(args) {
            setTimeout(function clearText() {
                    this.cell.querySelector("input").select();
                }.bind(args),
                0);
        }

        function updateMark(attendanceCode) {
            const mark = $(":focus");

            if (codes.includes(attendanceCode)) {
                mark.text(attendanceCode);
                nextMark();
            } else {
                alert("Please enter a valid register code.");
            }
        }

        function nextMark() {
            const marks = $(".js-mark");
            const index = marks.index($(":focus"));
            marks.eq(index + 1).focus();
        }

        function prevMark() {
            const marks = $(".js-mark");
            const index = marks.index($(":focus"));
            if (index > 0) {
                marks.eq(index - 1).focus();
            }
        }

        function checkMarks(attendanceMarks) {
            var containsBlanks = false;

            for (i = 0; i < attendanceMarks.length; i++) {
                if (attendanceMarks[i].Mark === "-") {
                    containsBlanks = true;
                    break;
                }
            }

            return containsBlanks;
        }

        function saveRegister() {
            var attendanceMarks = [];

            $(".js-mark").each(function() {
                const data = $(this);

                attendanceMarks.push({
                    "Id": parseInt(data.attr("data-mark-id"), 10),
                    "StudentId": parseInt(data.attr("data-student-id"), 10),
                    "WeekId": @Model.Week.Id,
                    "PeriodId": @Model.Session.PeriodId,
                    "Mark": data.text(),
                    "MinutesLate": parseInt(data.attr("data-mins-late"), 10),
                    "Comments": data.attr("data-comments"),
                    "MeaningId": 0
                });
            });

            if (checkMarks(attendanceMarks)) {
                bootbox.confirm("Students with missing marks will be marked as absent. Do you wish to proceed?",
                    function(result) {
                        if (result) {
                            $.ajax({
                                url: saveRegisterUrl,
                                method: "POST",
                                data: JSON.stringify(attendanceMarks),
                                contentType: "application/json; charset=utf-8",
                                success: function(e) {
                                    toastr.success(e, "Success");
                                },
                                error: function(e) {
                                    toastr.error(e.responeJSON, "Error");
                                }
                            });
                        }
                    });
            } else {
                $.ajax({
                    url: saveRegisterUrl,
                    method: "POST",
                    data: JSON.stringify(attendanceMarks),
                    contentType: "application/json; charset=utf-8",
                    success: function(e) {
                        toastr.success(e, "Success");
                    },
                    error: function(e) {
                        toastr.error(e.responeJSON, "Error");
                    }
                });
            }
        }
    </script>

    <script type="text/x-jsrender" id="marksStudentTemplate">
        <div>
            ${StudentName}
        </div>
    </script>
}