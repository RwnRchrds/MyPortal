@using MyPortal.BusinessLogic.Services.Identity
@using MyPortal.Extensions
@using Syncfusion.EJ2.Grids
@using Syncfusion.EJ2.Schedule
@model MyPortal.Areas.Staff.ViewModels.Staff.StaffHomeViewModel
@{
    ViewBag.Title = $"Home: {Model.CurrentUser.GetDisplayName()}";
    ViewBag.DisplayTitle = "Staff Home";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">@Model.CurrentUser.GetDisplayName()</h1>
</div>

@if (Model.SelectedAcademicYearId == 0 || Model.SelectedAcademicYearId == null)
{
    <div class="row">
        <div class="col-xl-12 col-md-12">
            <div class="alert alert-danger" role="alert">
                No academic years have been defined
            </div>
        </div>
    </div>
}

@if (User.HasPermission("ChangeAcademicYear"))
{
    <div class="row">
        <div class="col mb-4">
            <button type="button" class="btn btn-sm btn-primary px-3" data-toggle="modal" data-target="#ChangeAcademicYearModal">

                <i class="fas fa-school"></i> Select Academic Year

            </button>
        </div>
    </div>
}

<div class="row">
    <div class="col-xl-3 col-lg-3">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary"><i class="fas fa-address-card"></i> My Details</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                <div class="col-lg-12 text-sm">
                    <div class="row">
                        <div class="col-lg-6 pb-3">
                            <div class="font-weight-bold text-primary mb-0">Name</div>
                            <div class="font-weight-bold text-gray-800 mb-0">
                                @Model.CurrentUser.Person.Title @Model.CurrentUser.Person.FirstName @Model.CurrentUser.Person.LastName
                            </div>
                        </div>
                        <div class="col-lg-6 pb-3">
                            <div class="font-weight-bold text-primary mb-0">Staff Code</div>
                            <div class="font-weight-bold text-gray-800 mb-0">
                                @Model.CurrentUser.Code
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    @if (User.HasPermission("ViewApprovedBulletins"))
    {
        <div class="col-md-6">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary"><i class="fas fa-rss"></i> Bulletins</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    <div class="mp-notes">
                        <div class="mp-notes-items">
                            <div class="mp-notes-item">
                                <div class="mp-notes-media">
                                    <span class="mp-notes-icon">
                                        <i class="fas fa-baby"></i>
                                    </span>
                                </div>
                                <div class="mp-notes-content">
                                    <div class="mp-notes-body">
                                        A test message
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (User.HasPermission("ViewTrainingCertificates"))
{
    <div class="row">
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary"><i class="fas fa-certificate"></i> Training Courses</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    @Html.EJS().Grid("Training").DataSource(dataManager =>
                    {
                        dataManager.Url(Url.HttpRouteUrl("ApiGetTrainingCertificatesByStaffMemberDataGrid", new {staffId = Model.CurrentUser.Id})).CrossDomain(false).Adaptor("UrlAdaptor");
                    }).Columns(col =>
                    {
                        col.Field("CourseCode").HeaderText("Code").Template("#trainingCodeTemplate").HideAtMedia("(min-width: 1200px)").Width("50").Add();
                        col.Field("CourseDescription").HeaderText("Description").Template("#trainingDescriptionTemplate").Width("100").Add();
                        col.Field("Status").HeaderText("Status").Template("#trainingStatusTemplate").Width("50").Add();
                    }).AllowPaging().PageSettings(p => p.PageSize(5)).EnableHover(false).Render()
                </div>
            </div>
        </div>
        
        <div class="col-lg-6">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary"><i class="fas fa-clipboard-list"></i> Observations</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    @Html.EJS().Grid("Observations").DataSource(dataManager =>
                    {
                        dataManager.Url(Url.HttpRouteUrl("ApiGetObservationsByStaffMemberDataGrid", new {staffId = Model.CurrentUser.Id})).CrossDomain(false).Adaptor("UrlAdaptor");
                    }).Columns(col =>
                    {
                        col.Field("Date").HeaderText("Date").Template("#observationsDateTemplate").Width("50").Add();
                        col.Field("ObserverName").HeaderText("Observed By").Template("#observationsObserverTemplate").HideAtMedia("(min-width: 1200px)").Width("100").Add();
                        col.Field("Outcome").HeaderText("Outcome").Template("#observationsOutcomeTemplate").Width("100").Add();
                    }).AllowPaging().PageSettings(p => p.PageSize(5)).EnableHover(false).Render()
                </div>
            </div>
        </div>
    </div>
}

@if (User.HasPermission("ViewPersonAttachments"))
{
    <div class="row">
        <div class="col-xl-12 col-lg-12">
            <div class="card shadow mb-4">
                <!-- Card Header - Dropdown -->
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary"><i class="fas fa-file-alt"></i> Documents</h6>
                </div>
                <!-- Card Body -->
                <div class="card-body">
                    @Html.EJS().Grid("Documents").DataSource(dataManager =>
                    {
                        dataManager.Url(Url.HttpRouteUrl("ApiGetAttachmentsByPersonDataGrid", new {personId = Model.CurrentUser.Person.Id})).CrossDomain(false).Adaptor("UrlAdaptor");
                    }).Columns(col =>
                    {
                        col.Field("Description").HeaderText("Description").Template("#documentsDescriptionTemplate").Width("300").Add();
                        col.Field("Date").HeaderText("Date").Template("#documentsDateTemplate").Width("250").Add();
                    }).AllowPaging().PageSettings(p => p.PageSize(5)).EnableHover(false).Render()
                </div>
            </div>
        </div>
    </div>
}

@if (User.HasPermission("ChangeAcademicYear"))
{
    <div id="ChangeAcademicYearModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!--content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Select Academic Year</h5>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"></span>&times;</button>
                </div>
                @using (Ajax.BeginForm(null, null, new AjaxOptions { Url = Url.HttpRouteUrl("ApiChangeSelectedAcademicYear", new {}), HttpMethod = "POST", OnSuccess = "selectYearSuccess", OnFailure = "selectYearFailure" }, new { id = "newLessonPlanForm" }))
                {
                    <div class="modal-body">
                        <div class="form-group">
                            @Html.Label("Academic Year")
                            @Html.DropDownList("Id", new SelectList(Model.CurriculumAcademicYears, "Id", "Name", Model.SelectedAcademicYearId), new { @class = "form-control form-control-sm", id = "selectedYear" })
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary btn-sm" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary btn-sm">Save</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@section scripts
{
    <script>
        $(document).ready(function() {

        });

        function selectYearSuccess(result) {
            $("#ChangeAcademicYearModal").modal('hide');
            toastr.success(result);
            location.reload();
        }

        function selectYearFailure(result) {
            $("#ChangeAcademicYearModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function trainingDataBound(args) {
            this.autoFitColumns();
        }
    </script>

    <script type="text/x-jsrender" id="documentsDescriptionTemplate">
        <div>
            ${Description}
        </div>
    </script>

    <script type="text/x-jsrender" id="documentsDateTemplate">
        <div>
            ${formatDate(Date.toString())}
        </div>
    </script>

    <script type="text/x-jsrender" id="observationsDateTemplate">
        <div>
            ${formatDate(Date.toString())}
        </div>
    </script>

    <script type="text/x-jsrender" id="observationsObserverTemplate">
        <div>
            ${ObserverName}
        </div>
    </script>

    <script type="text/x-jsrender" id="observationsOutcomeTemplate">
        <div class="font-weight-bold">
            <span><span class="dot mr-2" style="background-color: ${OutcomeColourCode}"></span><div class="inline-block m-auto">${Outcome}</div></span>
        </div>
    </script>

    <script type="text/x-jsrender" id="trainingCodeTemplate">
        <div>
            ${CourseCode}
        </div>
    </script>

    <script type="text/x-jsrender" id="trainingDescriptionTemplate">
        <div>
            ${CourseDescription}
        </div>
    </script>

    <script type="text/x-jsrender" id="trainingStatusTemplate">
        <div class="font-weight-bold">
            <span><span class="dot mr-2" style="background-color: ${StatusColourCode}"></span><div class="inline-block m-auto">${Status}</div></span>    
        </div>
    </script>
}