@using MyPortal.Services
@model MyPortal.Areas.Staff.ViewModels.ResultSetsViewModel
@{
    ViewBag.Title = "Result Sets";
    ViewBag.DisplayTitle = "Result Sets";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Result Sets</h1>
</div>

<div class="row">
    
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary"><i class="fas fa-database"></i> Result Sets</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                
                <div class="mb-4">
                    <button type="button" class="btn btn-sm btn-primary" data-toggle="modal" data-target="#NewResultSetModal"><i class="fas fa-plus"></i> New Result Set</button>
                </div>

                @Html.EJS().Grid("ResultSets").DataSource(d => { d.Url(Url.HttpRouteUrl("ApiGetAllResultSetsDataGrid", new {})).CrossDomain(false).Adaptor("UrlAdaptor"); }).Columns(c =>
                {
                    c.Field("Name").HeaderText("Name").Template("#resultSetsNameTemplate").Width("150").Add();
                    c.HeaderText("Status").Template("#resultSetsStatusTemplate").Width("150").Add();
                    c.HeaderText("Actions").Template("#resultSetsActionsTemplate").Width("170").Add();
                }).AllowPaging().PageSettings(p => p.PageSize(12)).SearchSettings(s => { s.Operator("contains").IgnoreCase(true); }).Toolbar(new List<string> {"Search"}).Render()
            </div>
        </div>
    </div>
    
</div>

<div id="NewResultSetModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!--content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">New Result Set</h5>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"></span>&times;</button>
                </div>
                @using (Ajax.BeginForm(null, null, new AjaxOptions { Url = Url.HttpRouteUrl("ApiCreateResultSet", new {}), HttpMethod = "POST", OnSuccess = "newResultSetSuccess", OnFailure = "newResultSetFailure" }, new { id = "newResultSetForm" }))
                {
                    <div class="modal-body">
                        <div class="form-group">
                            @Html.Label("Name")
                            @Html.TextBoxFor(x => x.ResultSet.Name, new { @class = "form-control form-control-sm", Name = "Name" })
                            @Html.ValidationMessageFor(x => x.ResultSet.Name)
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-sm btn-primary" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-sm btn-primary">Save</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div id="EditResultSetModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!--content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Result Set</h5>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"></span>&times;</button>
                </div>
                @using (Ajax.BeginForm(null, null, new AjaxOptions { Url = Url.HttpRouteUrl("ApiUpdateResultSet", new {}), HttpMethod = "POST", OnSuccess = "editResultSetSuccess", OnFailure = "editResultSetFailure" }, new { id = "editResultSetForm" }))
                {
                    <div class="modal-body">
                        <div class="form-group">
                            @Html.LabelFor(x => x.ResultSet.Name)
                            @Html.TextBoxFor(x => x.ResultSet.Name, new { @class = "form-control form-control-sm", Name = "Name", id = "EditResultSetNameControl" })
                            @Html.ValidationMessageFor(x => x.ResultSet.Name)
                        </div>
                        <div class="form-group">
                            @Html.HiddenFor(x => x.ResultSet.Id, new { Name = "Id", id = "EditResultSetIdControl" })
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-sm btn-primary" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-sm btn-primary">Save</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

@section scripts
{
    <script>

        var urlGetResultSetById = "@Url.HttpRouteUrl("ApiGetResultSetById", new {resultSetId = 9999})";
        var urlDeleteResultSet = "@Url.HttpRouteUrl("ApiDeleteResultSet", new {resultSetId = 9999})";

        $(document).ready(function() {
            $('.modal').on('hidden.bs.modal',
                function() {
                    $(this).find('form').trigger('reset');
                });

            $("#ResultSets").on("click",
                ".js-edit",
                function() {
                    var button = $(this);
                    var setId = button.attr("data-set-id");
                    $.ajax({
                        url: urlGetResultSetById.replace("9999", setId),
                        method: "GET",
                        success: function(result) {
                            $("#EditResultSetNameControl").val(result["name"]);
                            $("#EditResultSetIdControl").val(result["id"]);
                        },
                        error: function() {
                            toastr.error("Failed to load result set data");
                        }
                    });
                    $("#EditResultSetModal").modal('toggle');
                });

            $("#ResultSets").on("click",
                ".js-delete",
                function() {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this result set?",
                        function(result) {
                            if (result) {
                                $.ajax({
                                    url: urlDeleteResultSet.replace("9999", button.attr("data-set-id")),
                                    method: "DELETE",
                                    success: function(a) {
                                        refreshTable("ResultSets");
                                        toastr.success(a);
                                    },
                                    error: function(e) {
                                        toastr.error(e.responseJSON);
                                    }
                                });
                            }
                        });
                });

        });

        function newResultSetSuccess(result) {
            $("#NewResultSetModal").modal('hide');
            refreshTable("ResultSets");
            toastr.success(result, "Success");
        }

        function newResultSetFailure(result) {
            $("#NewResultSetModal").modal('hide');
            toastr.error(result.responseJSON, "Error");
        }

        function editResultSetSuccess(result) {
            $("#EditResultSetModal").modal('hide');
            refreshTable("ResultSets");
            toastr.success(result, "Success");
        }

        function editResultSetFailure(result) {
            $("#EditResultSetModal").modal('hide');
            toastr.error(result.responseJSON, "Error");
        }

        function renderStatus(current) {
            if (current) {
                return "Current";
            } else {
                return "Active";
            }
        }

        function renderActions(id) {
            const editButton =
                `<button type='button' class='btn btn-link js-edit' data-set-id="${id}">Edit</button>`;

            const deleteButton =
                `<button type='button' class='btn btn-link js-delete' data-set-id="${id}">Delete</button>`;

            return editButton + deleteButton;
        }
    </script>

    <script type="text/x-jsrender" id="resultSetsNameTemplate">
        <div>
            ${Name}
        </div>
    </script>

    <script type="text/x-jsrender" id="resultSetsStatusTemplate">
        <div>
            ${renderStatus(IsCurrent)}
        </div>
    </script>

    <script type="text/x-jsrender" id="resultSetsActionsTemplate">
        <div>
            ${renderActions(Id)}
        </div>
    </script>

    @Scripts.Render("~/bundles/jqueryval")
}