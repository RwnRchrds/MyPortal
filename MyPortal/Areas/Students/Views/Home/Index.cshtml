@using MyPortal.Services
@using Syncfusion.EJ2.Grids
@model MyPortal.Areas.Staff.ViewModels.StudentOverviewViewModel
@{
    ViewBag.Title = $"Home: {PeopleService.GetStudentDisplayName(Model.Student)}";
    ViewBag.DisplayTitle = "Home";
    Layout = "~/Views/Portal/_LayoutStudent.cshtml";

    var gender = Model.Genders.SingleOrDefault(x => x.Value == Model.Student.Person.Gender);

    var genderLabel = gender == null ? "Not Specified" : gender.Name;
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">@PeopleService.GetStudentDisplayName(Model.Student).ResponseObject</h1>
</div>

<div class="row">

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Account Balance</div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">
                            £@Model.Student.AccountBalance
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-pound-sign fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card shadow h-100 py-2" id="attendanceBlock">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Attendance</div>
                        @if (Model.HasAttendaceData && Model.Attendance != null)
                        {
                            <div class="h5 mb-0 font-weight-bold text-gray-800" data-hasdata="true" id="attendanceDetail">
                                @Model.Attendance%
                            </div>
                        }
                        else
                        {
                            <div class="h5 mb-0 font-weight-bold text-gray-800" id="attendanceDetail">
                                --
                            </div>
                        }
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-calendar fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card shadow h-100 py-2" id="achievementBlock">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Achievement</div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800" id="achievementDetail">
                            @Model.AchievementCount
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-smile fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card shadow h-100 py-2" id="behaviourBlock">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Behaviour</div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800" id="behaviourDetail">
                            @Model.BehaviourCount
                        </div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-frown fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-6 col-md-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Basic Details</h6>
            </div>

            <div class="card-body">
                <table class="table-condensed mp-table-condensed">
                    <tr>
                        <td>
                            <b>First Name</b>
                        </td>
                        <td>@Model.Student.Person.FirstName</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Last Name</b>
                        </td>
                        <td>@Model.Student.Person.LastName</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Gender</b>
                        </td>
                        <td>@genderLabel</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Year Group</b>
                        </td>
                        <td>@Model.Student.PastoralYearGroup.Name</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Reg Group</b>
                        </td>
                        <td>@Model.Student.PastoralRegGroup.Name</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Reg Tutor</b>
                        </td>
                        <td>@Model.Student.PastoralRegGroup.Tutor.Person.Title @Model.Student.PastoralRegGroup.Tutor.Person.FirstName.Substring(0, 1) @Model.Student.PastoralRegGroup.Tutor.Person.LastName</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Head of Year</b>
                        </td>
                        <td>@Model.Student.PastoralYearGroup.HeadOfYear.Person.Title @Model.Student.PastoralYearGroup.HeadOfYear.Person.FirstName.Substring(0, 1) @Model.Student.PastoralYearGroup.HeadOfYear.Person.LastName</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Log Notes</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                @Html.EJS().Grid("logs").DataSource(dataManager => { dataManager.Url(Url.HttpRouteUrl("ApiProfilesGetLogsByStudentDataGrid", new {studentId = Model.Student.Id})).CrossDomain(false).Adaptor("UrlAdaptor"); }).Columns(c =>
                {
                    c.Field("Date").HeaderText("Date").Template("#logDateTemplate").Width("105").Add();
                    c.Field("AuthorName").HeaderText("Author").Template("#logAuthorTemplate").Width("110").Add();
                    c.Field("LogTypeName").HeaderText("Log Type").Template("#logTypeTemplate").Width("150").Add();
                    c.Field("Message").HeaderText("Message").Width("500").Template("#logMessageTemplate").Add();
                }).AllowPaging().AllowTextWrap().PageSettings(p => p.PageSize(5)).TextWrapSettings(w => { w.WrapMode(WrapMode.Content); }).QueryCellInfo("logQuery").EnableHover(false).Render()
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Documents</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                @Html.EJS().Grid("documents").DataSource(dataManager => { dataManager.Url("/api/documents/personal/get/dataGrid/" + Model.Student.Person.Id).CrossDomain(false).Adaptor("UrlAdaptor"); }).Columns(c =>
                {
                    c.Field("Description").HeaderText("Description").Template("#docsDescriptionTemplate").Width("700").Add();
                    c.Field("Date").HeaderText("Date").Template("#docsDateTemplate").Width("110").Add();
                }).AllowPaging().PageSettings(p => p.PageSize(5)).Render()
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script>

        $(document).ready(function() {

            overviewCalc();
        });

        function overviewCalc() {

            if ($("#attendanceDetail").attr("data-hasdata") === "true") {
                if (parseInt($("#attendanceDetail").text()) >= 95) {
                    $("#attendanceBlock").addClass("border-left-success");
                } else if (parseInt($("#attendanceDetail").text()) < 90) {
                    $("#attendanceBlock").addClass("border-left-danger");
                } else if (parseInt($("#attendanceDetail").text()) < 95) {
                    $("#attendanceBlock").addClass("border-left-warning");
                }
            }

            if (parseInt($("#achievementDetail").text()) < @Model.BehaviourCount) {
                $("#achievementBlock").addClass("border-left-danger");
            }
            if (parseInt($("#achievementDetail").text()) === @Model.BehaviourCount) {
                $("#achievementBlock").addClass("border-left-warning");
            }
            if (parseInt($("#achievementDetail").text()) > @Model.BehaviourCount) {
                $("#achievementBlock").addClass("border-left-success");
            }


            if (parseInt($("#behaviourDetail").text()) === 0) {
                $("#behaviourBlock").addClass("border-left-success");
            }
            if (parseInt($("#behaviourDetail").text()) > 9) {
                $("#behaviourBlock").addClass("border-left-danger");
            }
            if (parseInt($("#behaviourDetail").text()) > 0) {
                $("#behaviourBlock").addClass("border-left-warning");
            }
        }

        function renderLogMessage(data) {
            if ("@Model.Student.Person.Gender" === "M") {
                return data.replace(/<name>/g, "@Model.Student.Person.FirstName")
                    .replace(/<he>/g, "he")
                    .replace(/<He>/g, "He")
                    .replace(/<him>/g, "him")
                    .replace(/<Him>/g, "Him")
                    .replace(/<his>/g, "his")
                    .replace(/<His>/g, "His")
                    .replace(/<himself>/g, "himself")
                    .replace(/<Himself>/g, "Himself")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/\n/g, "<br/>");
            }

            if ("@Model.Student.Person.Gender" === "F") {
                return data.replace("<name>", "@Model.Student.Person.FirstName")
                    .replace(/<he>/g, "she")
                    .replace(/<He>/g, "She")
                    .replace(/<him>/g, "her")
                    .replace(/<Him>/g, "Her")
                    .replace(/<his>/g, "her")
                    .replace(/<His>/g, "Her")
                    .replace(/<himself>/g, "herself")
                    .replace(/<Himself>/g, "Herself")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/\n/g, "<br/>");
            }

            if ("@Model.Student.Person.Gender" === "X") {
                return data.replace("<name>", "@Model.Student.Person.FirstName")
                    .replace(/<he>/g, "they")
                    .replace(/<He>/g, "They")
                    .replace(/<him>/g, "them")
                    .replace(/<Him>/g, "Them")
                    .replace(/<his>/g, "their")
                    .replace(/<His>/g, "Their")
                    .replace(/<himself>/g, "themselves")
                    .replace(/<Himself>/g, "Themselves")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/\n/g, "<br/>");
            }

            return data;
        }

        function logQuery(args) {

            if (args.column.field === "LogTypeName") {
                if (args.cell.textContent === "Academic Support") {
                    args.cell.classList.add("mp-log-academic-support");
                }
                else if (args.cell.textContent === "Behaviour Log") {
                    args.cell.classList.add("mp-log-behaviour");
                }
                else if (args.cell.textContent === "Report") {
                    args.cell.classList.add("mp-log-report");
                }
                else if (args.cell.textContent === "Praise") {
                    args.cell.classList.add("mp-log-praise");
                }
                else if (args.cell.textContent === "SEN Note") {
                    args.cell.classList.add("mp-log-sen");
                }
                else if (args.cell.textContent === "Tutor Note") {
                    args.cell.classList.add("mp-log-tutor-note");
                }
                else if (args.cell.textContent === "Medical Event") {
                    args.cell.classList.add("mp-log-medical-event");
                }
                else if (args.cell.textContent === "Student Feed") {
                    args.cell.classList.add("mp-log-student-feed");
                }
            }
        }
    </script>

    <script type="text/x-jsrender" id="logAuthorTemplate">
        <div>
            ${AuthorName}
        </div>
    </script>

    <script type="text/x-jsrender" id="logDateTemplate">
        <div>
            ${formatDate(Date.toString())}
        </div>
    </script>

    <script type="text/x-jsrender" id="logTypeTemplate">
        <div>
            ${LogTypeName}
        </div>
    </script>

    <script type="text/x-jsrender" id="logMessageTemplate">
        <div>
            <b>${renderLogMessage(Message.toString())}</b>
        </div>
    </script>

    <script type="text/x-jsrender" id="docsDescriptionTemplate">
        <div>
            <b><a href="${Url}" target="_blank">${Description}</a></b>
        </div>
    </script>


    <script type="text/x-jsrender" id="docsDateTemplate">
        <div>
            ${formatDate(Date.toString())}
        </div>
    </script>

    @Scripts.Render("~/bundles/students")
}