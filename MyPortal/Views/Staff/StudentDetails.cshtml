@using Microsoft.AspNet.Identity
@model MyPortal.ViewModels.StudentDetailsViewModel
@{
    ViewBag.Title = "Student Details";
    Layout = "~/Views/Shared/_LayoutStaff.cshtml";
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>

<!--TITLE [STUDENT NAME]-->
<div class="container float-left" id="title">  

    <h2 class="mp-page-title">@Model.Student.LastName, @Model.Student.FirstName</h2>

    <hr/>

</div>

<body>

<!--BUTTONS AT TOP OF PAGE-->
<div class="container float-left" id="container-1">

    @if (User.IsInRole("SeniorStaff"))
    {
        <button type="button" class="btn btn-warning mp-btn-top" data-toggle="modal" data-target="#EditDetailsForm">

            <i class="far fa-id-card"></i> Edit Details

        </button>
    }

    <button type="button" class="btn btn-warning mp-btn-top" id="ViewResultsButton" data-student-id="@Model.Student.Id">

        <i class="far fa-chart-bar"></i> View Results

    </button>
    
    <hr />

</div>

<!--CARD CONTAINER-->
<div class="container float-left" id="container-2">
    <!--Student Details Card-->
    <div class="float-left" id="detailsDiv">

        <div class="card border-primary mp-card" id="detailsCard">

            <div class="card-header bg-primary">MyDetails</div>

            <div class="card-body">
                
                <!--Student Details Table-->
                <table class="table-condensed mp-table-condensed">
                    <tr>
                        <td>
                            <b>First Name</b>
                        </td>
                        <td>@Model.Student.FirstName</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Last Name</b>
                        </td>
                        <td>@Model.Student.LastName</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Year Group</b>
                        </td>
                        <td>@Model.Student.YearGroup1.Name</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Reg Group</b>
                        </td>
                        <td>@Model.Student.RegGroup1.Name</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Reg Tutor</b>
                        </td>
                        <td>@Model.Student.RegGroup1.Staff.Title @Model.Student.RegGroup1.Staff.FirstName.Substring(0, 1) @Model.Student.RegGroup1.Staff.LastName</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Head of Year</b>
                        </td>
                        <td>@Model.Student.YearGroup1.Staff.Title @Model.Student.YearGroup1.Staff.FirstName.Substring(0, 1) @Model.Student.YearGroup1.Staff.LastName</td>
                    </tr>
                </table>

            </div>
            
            <!--Student Details Footer (Account Balance)-->
            <div class="card-footer bg-transparent border-primary">

                <h5><b>Balance:</b> £@Model.Student.AccountBalance</h5>

            </div>
        </div>
    </div>

    <!-- MyResults Table Card -->
    <div class="float-left" id="resultsTableDiv">
        <div class="card border-primary mp-card" id="resultsTableCard">
            <div class="card-header bg-primary">MyResults</div>
            @if (!Model.Results.Any())
            {
                {
                    <text>
                        <div class="card-body">No results to display.</div></text>
                }
            }
            else
            {
                <table class="table table-condensed table-bordered mp-table" id="resultsTable">
                    <thead>
                    <tr>
                        <th>Subject</th>
                        <th>Result</th>
                    </tr>
                    </thead>
                    @foreach (var result in Model.Results)
                    {
                        <tr>
                            <td>@result.Subject1.Name</td>
                            <td>@result.Value</td>
                        </tr>
                    }
                </table>
            }
        </div>
    </div>

    <!-- MyResults Chart Panel -->
    <div class="float-left" id="resultsChartDiv">
        <div class="card border-primary mp-card" id="resultsChartCard">
            <div class="card-header bg-primary">MyResults - Chart</div>
            <div class="card-body">
                @if (!Model.Results.Any())
                {
                    <text>No data to display.</text>
                }
                else
                {
                    <canvas id="resultsChart" style="height: 300px; width: 300px;"></canvas>

                    <script>
                        var ctx = document.getElementById('resultsChart').getContext('2d');
                        var chart = new Chart(ctx,
                            {
                                // The type of chart we want to create
                                type: 'bar',
                                fillOpacity: .3,
                                // The data for our dataset
                                data: {
                                    @if (Model.IsUpperSchool)
                                    {
                                        <text>labels: ["A*", "A", "B", "C", "D", "E", "F", "G", "U"],</text>
                                    }
                                    else
                                    {
                                        <text>labels: ["E", "8", "7", "6", "5", "4", "3", "2", "1"],</text>
                                    }
                                    datasets: [
                                        {
                                            label: "",
                                            backgroundColor: [
                                                "rgba(255,0,0,0.5)", //L1
                                                "rgba(255,127,0,0.5)", //L2
                                                "rgba(255,255,0,0.5)", //L3
                                                "rgba(0,255,0,0.5)", //L4
                                                "rgba(0,0,255,0.5)", //L5
                                                "rgba(75,0,130,0.5)", //L6
                                                "rgba(148,0,211,0.5)", //L7
                                                "rgba(228,35,157,0.5)", //L8
                                                "rgba(0,0,0,0.5)"
                                            ], //L9
                                            borderColor: [
                                                "rgba(255,0,0,0.5)", //L1
                                                "rgba(255,127,0,0.5)", //L2
                                                "rgba(255,255,0,0.5)", //L3
                                                "rgba(0,255,0,0.5)", //L4
                                                "rgba(0,0,255,0.5)", //L5
                                                "rgba(75,0,130,0.5)", //L6
                                                "rgba(148,0,211,0.5)", //L7
                                                "rgba(228,35,157,0.5)", //L8
                                                "rgba(0,0,0,0.5)"
                                            ], //L9
                                            data: [
                                                @Model.ChartData.L1,
                                                @Model.ChartData.L2,
                                                @Model.ChartData.L3,
                                                @Model.ChartData.L4,
                                                @Model.ChartData.L5,
                                                @Model.ChartData.L6,
                                                @Model.ChartData.L7,
                                                @Model.ChartData.L8,
                                                @Model.ChartData.L9
                                            ]
                                        }
                                    ]
                                },

                                // Configuration options go here
                                options: {
                                    legend: {
                                        display: false
                                    },
                                    scales: {
                                        yAxes: [
                                            {
                                                ticks: {
                                                    beginAtZero: true
                                                }
                                            }
                                        ]
                                    }
                                }
                            });
                    </script>
                }
            </div>
        </div>
    </div>
</div>

<!-- MyLogs Panel -->
<div class="container float-left mp-margin-top">
    <div>
        <hr/>
        <h4 class="mp-bold">MyLogs</h4>
        <button type="button" class="btn btn-success" data-toggle="modal" data-target="#NewLogModal">
            <i class="fa fa-plus-circle"></i> New Log
        </button>
        <table class="table table-bordered mp-table mp-log-table" id="logs" data-student-id="@Model.Student.Id">
            <thead>
            <tr>
                <th>Date</th>
                <th>Author</th>
                <th>Type</th>
                <th>Message</th>
                <th>Actions</th>
            </tr>
            </thead>
        </table>
    </div>
</div>

<!-- MyDocuments Panel -->
<div class="container float-left mp-margin-top">
    <div>
        <hr/>
        <h4 class="mp-bold">MyDocuments</h4>
        <button type="button" class="btn btn-success" data-toggle="modal" data-target="#NewDocumentModal">
            <i class="fa fa-plus-circle"></i> Add Document
        </button>
        <table class="table table-bordered mp-table mp-document-table mp-table-link" id="documents" data-student-id="@Model.Student.Id">
            <thead>
            <tr>
                <th>Description</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
            </thead>
        </table>
    </div>
</div>

<!-- New Logs Form -->
<div id="NewLogModal" class="modal fade" role="dialog">
    <div class="modal-dialog" role="document">

        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">New Log - @Model.Student.LastName, @Model.Student.FirstName</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = ""}, new {id = "NewLogForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.LabelFor(l => l.Log.Type)
                        @Html.DropDownListFor(l => l.Log.Type, new SelectList(Model.LogTypes, "Id", "Name"), "Select Log Type", new {@class = "form-control", Name = "Type"})
                        @Html.ValidationMessageFor(l => l.Log.Type)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(l => l.Log.Message)
                        @Html.TextAreaFor(l => l.Log.Message, new {@class = "form-control mp-log-message-box", Name = "Message"})
                        @Html.ValidationMessageFor(l => l.Log.Message)
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(l => l.Log.Student, new {Value = Model.Student.Id, Name = "Student"})
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(l => l.Log.Date, new {Value = DateTime.Now, Name = "Date"})
                        @Html.HiddenFor(l => l.Log.Author, new {Value = User.Identity.GetUserId(), Name = "Author"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<!-- Edit Logs Form -->
<div id="EditLogModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">New Log - @Model.Student.LastName, @Model.Student.FirstName</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = ""}, new {id = "EditLogForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.LabelFor(l => l.Log.Type)
                        @Html.DropDownListFor(l => l.Log.Type, new SelectList(Model.LogTypes, "Id", "Name"), "Select Log Type", new {@class = "form-control", id = "EditLogTypeControl", Name = "Type"})
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(l => l.Log.Message)
                        @Html.TextAreaFor(l => l.Log.Message, new {@class = "form-control mp-log-message-box", id = "EditLogMessageControl", Name = "Message"})
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(l => l.Log.Student, new {Value = Model.Student.Id, Name = "Student"})
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(l => l.Log.Id, new {id = "EditLogIdControl", Name = "Id"})
                        @Html.HiddenFor(l => l.Log.Date, new {Value = DateTime.Now, Name = "Date"})
                        @Html.HiddenFor(l => l.Log.Author, new {Value = User.Identity.GetUserId(), Name = "Author"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" id="EditLogSave" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<!-- Edit Details Form -->
<div id="EditDetailsForm" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Details - @Model.Student.LastName, @Model.Student.FirstName</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Html.BeginForm("SaveStudent", "Staff"))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.LabelFor(s => s.Student.FirstName)
                        @Html.TextBoxFor(s => s.Student.FirstName, new {@class = "form-control"})
                        @Html.ValidationMessageFor(s => s.Student.FirstName)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => s.Student.LastName)
                        @Html.TextBoxFor(s => s.Student.LastName, new {@class = "form-control"})
                        @Html.ValidationMessageFor(s => s.Student.LastName)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => s.Student.YearGroup)
                        @Html.DropDownListFor(s => s.Student.YearGroup, new SelectList(Model.YearGroups, "Id", "Name"), new {@class = "form-control", id = "yearGroupList"})
                        @Html.ValidationMessageFor(s => s.Student.YearGroup)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(s => s.Student.RegGroup)
                        @Html.DropDownListFor(s => s.Student.RegGroup, new SelectList(Model.RegGroups, "Id", "Name"), "Select Reg Group", new {@class = "form-control", id = "regGroupList"})
                        @Html.ValidationMessageFor(s => s.Student.RegGroup)
                    </div>
                    @Html.HiddenFor(s => s.Student.Id)
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<!--New Documents Form-->
<div id="NewDocumentModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add Document - @Model.Student.LastName, @Model.Student.FirstName</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = ""}, new {id = "newDocumentForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.LabelFor(x => x.Upload.Document.Description)
                        @Html.TextBoxFor(x => x.Upload.Document.Description, new {@class = "form-control", Name = "Document.Description"})
                        @Html.ValidationMessageFor(x => x.Upload.Document.Description)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(x => x.Upload.Document.Url)
                        @Html.TextBoxFor(x => x.Upload.Document.Url, new {@class = "form-control", Name = "Document.Url"})
                        @Html.ValidationMessageFor(x => x.Upload.Document.Url)
                    </div>
                    <div class="form-group">
                        @Html.HiddenFor(x => x.Upload.Student, new {@class = "form-control", Value = Model.Student.Id, Name = "Student"})
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
</body>

@section scripts
{
    <script>
        //When Page Has Loaded, Prepare Scripts
        $(document).ready(function() {

            //---SCRIPT DEFINITIONS---

            //Delete Log When Button Clicked
            $("#logs").on("click",
                ".js-delete",
                function() {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this log?",
                        function(result) {
                            if (result) {
                                $.ajax({
                                    url: "/api/logs/log/" + button.attr("data-log-id"),
                                    method: "DELETE",
                                    success: function(result) {
                                        $("#logs").DataTable().ajax.reload();
                                        toastr.success(result);
                                    },
                                    error: function(result) {
                                        toastr.error(result.responseJSON);
                                    }
                                });
                            }
                        });
                });

            $("#newDocumentForm").on("submit",
                function(e) {

                    e.preventDefault();

                    var form = $("#newDocumentForm");
                    var data = form.serialize();

                    $.ajax({
                        url: "/api/students/documents/add",
                        data: data,
                        method: "POST",
                        success: function(result) {
                            $("#NewDocumentModal").modal('hide');
                            toastr.success(result);
                            $("#documents").DataTable().ajax.reload();
                        },
                        error: function(result) {
                            toastr.error(result.responseJSON);
                            form.reset();
                        }
                    });
                });

            $("#documents").on("click",
                ".js-delete",
                function() {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this document?",
                        function(result) {
                            if (result) {
                                $.ajax({
                                    url: "/api/students/documents/remove/" + button.attr("data-document-id"),
                                    method: "DELETE",
                                    success: function(ajaxResult) {
                                        $("#documents").DataTable().ajax.reload();
                                        toastr.success(ajaxResult);
                                    },
                                    error: function(ajaxResult) {
                                        toastr.error(ajaxResult.responseJSON);
                                    }
                                });
                            }
                        });
                });

            $('#NewDocumentModal').on('hidden.bs.modal',
                function() {
                    $(this).find('form').trigger('reset');
                });

            //Load Logs Table
            function loadLogTable() {
                var logsTable = $("#logs");
                $("#logs").DataTable({
                    ajax: {
                        url: "/api/logs/" + logsTable.attr("data-student-id"),
                        dataSrc: "",
                        method: "GET"
                    },
                    columns: [
                        {
                            data: "date",
                            render: function(data) {
                                var date = new Date(data);
                                return date.toLocaleDateString();
                            }

                        },
                        {
                            data: "staff.lastName",
                            render: function(data, type, log) {
                                return log.staff.title +
                                    " " +
                                    log.staff.firstName.substring(0, 1) +
                                    " " +
                                    log.staff.lastName;
                            }
                        },
                        {
                            data: "logType.name"
                        },
                        {
                            data: "message"
                        },
                        {
                            data: "id",
                            render: function(data) {
                                return "<button type='button' class='btn btn-xs btn-warning mp-btn-action-left js-edit' data-log-id=" +
                                    data +
                                    "><i class=\"far fa-edit\"></i></button> " +
                                    "<button type='button' class='btn btn-xs btn-danger mp-btn-action-right js-delete' data-log-id=" +
                                    data +
                                    "><i class=\"far fa-trash-alt\"></i></button>";
                            }
                        }
                    ],
                    paging: false,
                    ordering: false,
                    searching: false,
                    responsive: true,
                    info: false,
                    "createdRow": function(row, data, dataIndex) {
                        if (data.logType.name === "Academic Support") {
                            $(row).addClass("mp-log-academic-support");
                        }

                        if (data.logType.name === "Behaviour Log") {
                            $(row).addClass("mp-log-behaviour");
                        }

                        if (data.logType.name === "EOY Report") {
                            $(row).addClass("mp-log-eoy");
                        }

                        if (data.logType.name === "Praise") {
                            $(row).addClass("mp-log-praise");
                        }

                        if (data.logType.name === "SEN Note") {
                            $(row).addClass("mp-log-sen");
                        }

                        if (data.logType.name === "Student Feed") {
                            $(row).addClass("mp-log-student-feed");
                        }

                        if (data.logType.name === "Tutor Note") {
                            $(row).addClass("mp-log-tutor-note");
                        }


                        if (data.logType.name === "Medical Event") {
                            $(row).addClass("mp-log-medical-event");
                        }
                    },
                    "language": {
                        "emptyTable": "No logs to display"
                    }
                });
            }

            $("#documents").DataTable({
                ajax: {
                    url: "/api/students/documents/fetch/" + $("#documents").attr("data-student-id"),
                    dataSrc: "",
                    method: "GET"
                },
                columns: [
                    {
                        data: "document1.description",
                        render: function(data, type, document) {
                            return "<a href='" +
                                document.document1.url +
                                "' target='_blank'>" +
                                document.document1.description +
                                "</a>";
                        }

                    },
                    {
                        data: "document1.date",
                        render: function(data) {
                            var date = new Date(data);
                            return date.toLocaleDateString();
                        }
                    },
                    {
                        data: "id",
                        render: function(data) {
                            return "<button type='button' class='btn btn-xs btn-warning mp-btn-action-left js-edit' data-document-id=" +
                                data +
                                "><i class=\"far fa-edit\"></i></button> " +
                                "<button type='button' class='btn btn-xs btn-danger mp-btn-action-right js-delete' data-document-id=" +
                                data +
                                "><i class=\"far fa-trash-alt\"></i></button>";
                        }
                    }
                ],
                paging: false,
                ordering: false,
                searching: false,
                responsive: true,
                info: false,
                "language": {
                    "emptyTable": "No documents to display"
                }
            });

            //Edit Log Form Submit
            $("#EditLogForm").on("submit",
                function(e) {

                    e.preventDefault();

                    $.ajax({
                        url: "/api/logs/log/edit",
                        data: $("#EditLogForm").serialize(),
                        method: "POST",
                        success: function(result) {
                            $("#EditLogModal").modal('hide');
                            toastr.success(result);
                            $("#logs").DataTable().ajax.reload();
                        },
                        error: function(result) {
                            toastr.error(result.responseJSON);
                        }

                    });
                });

            //Open Form When Edit Log Button Clicked
            $("#logs").on("click",
                ".js-edit",
                function() {
                    var button = $(this);
                    var logId = button.attr("data-log-id");
                    $.ajax({
                        url: "/api/logs/log/" + logId,
                        method: "GET",
                        success: function(result) {
                            $("#EditLogTypeControl").val(result["type"]);
                            $("#EditLogMessageControl").val(result["message"]);
                            $("#EditLogIdControl").val(result["id"]);
                        },
                        error: function() {
                            toastr.error("Could Not Load Form");
                        }
                    });
                    $("#EditLogModal").modal('toggle');
                });

            //Colour Code Logs
            $(".logentry").each(function() {
                var log = (this);
                var logType = $(this).find(".logtype").html();

                if (logType === "Academic Support") {
                    $(log).addClass("mp-log-academic-support");
                }

                if (logType === "Behaviour Log") {
                    $(log).addClass("mp-log-behaviour");
                }

                if (logType === "EOY Report") {
                    $(log).addClass("mp-log-eoy");
                }

                if (logType === "Praise") {
                    $(log).addClass("mp-log-praise");
                }

                if (logType === "SEN Note") {
                    $(log).addClass("mp-log-sen");
                }

                if (logType === "Student Feed") {
                    $(log).addClass("mp-log-student-feed");
                }

                if (logType === "Tutor Note") {
                    $(log).addClass("mp-log-tutor-note");
                }
            });

            //Clear Modal When Closed
            $('#NewLogModal').on('hidden.bs.modal',
                function() {
                    $(this).find('form').trigger('reset');
                });

            $('#EditLogModal').on('hidden.bs.modal',
                function() {
                    $(this).find('form').trigger('reset');
                });

            //View Results
            $("#ViewResultsButton").on("click",
                function() {
                    var button = $(this);
                    location.replace("/Staff/Students/" + button.attr("data-student-id") + "/Results");
                });

            //New Log Form Submit
            $("#NewLogForm").on("submit",
                function(e) {

                    e.preventDefault();

                    $.ajax({
                        url: "/api/logs/new",
                        data: $("#NewLogForm").serialize(),
                        method: "POST",
                        success: function(result) {
                            $("#NewLogModal").modal('hide');
                            toastr.success(result);
                            $("#logs").DataTable().ajax.reload();
                        },
                        error: function(result) {
                            toastr.error(result.responseJSON);
                        }
                    });
                });

            //---FUNCTION CALLS---
            loadLogTable();
        });
    </script>

    @Scripts.Render("~/bundles/staff")
    @Scripts.Render("~/bundles/jqueryval")
}