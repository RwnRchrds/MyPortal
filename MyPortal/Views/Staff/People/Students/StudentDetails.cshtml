@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids
@model MyPortal.ViewModels.StudentDetailsViewModel
@{
    ViewBag.Title = "Student Details: " + Model.Student.Person.LastName + ", " + Model.Student.Person.FirstName;
    Layout = "~/Views/Shared/_LayoutStaff.cshtml";

    var gender = Model.Genders.SingleOrDefault(x => x.Value == Model.Student.Person.Gender);

    var genderLabel = gender == null ? "Not Specified" : gender.Name;

    var pupilPremium = Model.Student.FreeSchoolMeals ? "Yes" : "No";
    var giftedTalented = Model.Student.GiftedAndTalented ? "Yes" : "No";
    var freeSchoolMeals = Model.Student.FreeSchoolMeals ? "Yes" : "No";
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>

<style>
    .overview-card {
        width: 550px;
    }

    .e-headercell {
        background-color: #18bc9c !important;
    }

    .e-headercelldiv {
        font-size: 13px !important;
        color: white;
    }

    .mp-inline-block {
        display: inline-block;
    }
</style>

<!-- #region Title -->
<div class="container float-left" id="title">

    <h2 class="mp-page-title">@Model.Student.Person.LastName, @Model.Student.Person.FirstName</h2>

    <hr />

</div>
<!-- #endregion -->

<body>
    <!--#region Top of Page Buttons-->
    <div class="container float-left" id="container-1">

        @if (User.IsInRole("SeniorStaff"))
        {
            <button type="button" class="btn btn-warning mp-btn-top" data-toggle="modal" data-target="#EditDetailsModal">

                <i class="far fa-id-card"></i> Edit Details

            </button>
        }

        <div class="dropdown mp-btn-top mp-inline-block">
            <button class="btn btn-primary dropdown-toggle mp-btn-top" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fas fa-user-graduate"></i> Student
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <h6 class="dropdown-header">@Model.Student.Person.LastName, @Model.Student.Person.FirstName</h6>
                <a href="/Staff/People/Students/@Model.Student.Id/Behaviour" class="dropdown-item">Behaviour</a>
                <a href="/Staff/People/Students/@Model.Student.Id/Results" class="dropdown-item">Results</a>
            </div>
        </div>

        <hr />

    </div>
    <!--#endregion-->
    <!-- #region Card Container-->
    <div class="container float-left" id="container-2">
        <!--#region Student Details Card-->
        <div class="float-left" id="detailsDiv">

            <div class="card border-primary mp-card" id="detailsCard">

                <div class="card-header bg-primary">Basic Details</div>

                <div class="card-body">

                    <!--Student Details Table-->
                    <table class="table-condensed mp-table-condensed">
                        <tr>
                            <td>
                                <b>First Name</b>
                            </td>
                            <td>@Model.Student.Person.FirstName</td>
                        </tr>
                        <tr>
                            <td>
                                <b>Last Name</b>
                            </td>
                            <td>@Model.Student.Person.LastName</td>
                        </tr>
                        <tr>
                            <td>
                                <b>Gender</b>
                            </td>
                            <td>@genderLabel</td>
                        </tr>
                        <tr>
                            <td>
                                <b>Year Group</b>
                            </td>
                            <td>@Model.Student.PastoralYearGroup.Name</td>
                        </tr>
                        <tr>
                            <td>
                                <b>Reg Group</b>
                            </td>
                            <td>@Model.Student.PastoralRegGroup.Name</td>
                        </tr>
                        <tr>
                            <td>
                                <b>Reg Tutor</b>
                            </td>
                            <td>@Model.Student.PastoralRegGroup.Tutor.Person.Title @Model.Student.PastoralRegGroup.Tutor.Person.FirstName.Substring(0, 1) @Model.Student.PastoralRegGroup.Tutor.Person.LastName</td>
                        </tr>
                        <tr>
                            <td>
                                <b>Head of Year</b>
                            </td>
                            <td>@Model.Student.PastoralYearGroup.HeadOfYear.Person.Title @Model.Student.PastoralYearGroup.HeadOfYear.Person.FirstName.Substring(0, 1) @Model.Student.PastoralYearGroup.HeadOfYear.Person.LastName</td>
                        </tr>
                    </table>

                </div>

                <!--Student Details Footer (Account Balance)-->
                <div class="card-footer bg-transparent border-primary">

                    <h5><b>Balance:</b> £@Model.Student.AccountBalance</h5>

                </div>
            </div>
        </div>
        <!--#endregion-->
        <!-- #region MyResults Table Card -->
        <div class="float-left" id="resultsTableDiv">
            <div class="card border-primary mp-card overview-card" id="summaryCard">
                <div class="card-header bg-primary">Overview</div>
                <div class="float-left container">
                    <div class="mp-info-block inline-block" id="attendanceBlock">
                        @if (Model.HasAttendaceData && Model.Attendance != null)
                        {
                            <div class="mp-info-block-label">Attendance</div>
                            <div class="mp-info-block-detail" data-hasdata="true" id="attendanceDetail">
                                @Model.Attendance%
                            </div>
                        }
                        @if (!Model.HasAttendaceData || Model.Attendance == null)
                        {
                            <div class="mp-info-block-label">Attendance</div>
                            <div class="mp-info-block-detail-nodata" data-hasdata="false" id="attendanceDetail">
                                No Data
                            </div>
                        }
                    </div>

                    <div class="mp-info-block inline-block" id="achievementBlock">
                        <div class="mp-info-block-label">Achievements</div>
                        <div class="mp-info-block-detail" id="achievementDetail">
                            @Model.AchievementCount
                        </div>
                    </div>

                    <div class="mp-info-block inline-block" id="behaviourBlock">
                        <div class="mp-info-block-label">Behaviour</div>
                        <div class="mp-info-block-detail" id="behaviourDetail">
                            @Model.BehaviourCount
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!--#endregion-->
    </div>
    <!--#endregion-->
    <!-- #region MyLogs Panel -->

    <div class="container float-left mp-margin-top">
        <div>
            <hr />
            <h4 class="mp-bold">Log Notes</h4>
            <button type="button" class="btn btn-success mp-btn-table" data-toggle="modal" data-target="#NewLogModal">
                <i class="fa fa-plus-circle"></i> New Log Note
            </button>

            @Html.EJS().Grid("logs").DataSource(dataManager =>
            {
                dataManager.Url("/api/profiles/logs/dataGrid/get/" + Model.Student.Id).CrossDomain(false).Adaptor("UrlAdaptor");
            }).Columns(col =>
            {
                col.Field("Date").HeaderText("Date").Template("#logDateTemplate").Width("110").Add();
                col.Field("AuthorName").HeaderText("Author").Template("#logAuthorTemplate").Width("150").Add();
                col.Field("LogTypeName").HeaderText("Log Type").Template("#logTypeTemplate").Width("150").Add();
                col.Field("Message").HeaderText("Message").Width("400").Template("#logMessageTemplate").Add();
                col.HeaderText("Actions").Template("#logActionsTemplate").Width("170").Add();
            }).AllowPaging().EnableHover(false).AllowTextWrap().PageSettings(page => page.PageSize(5)).TextWrapSettings(wrap => { wrap.WrapMode(WrapMode.Content); }).GridLines(GridLine.Both).RowDataBound("logRowDataBound").Render()

        </div>
    </div>


    <!-- #endregion-->
    <!-- #region MyDocuments Panel -->
    <div class="container float-left mp-margin-top">
        <div>
            <hr />
            <h4 class="mp-bold">Documents</h4>
            <button type="button" class="btn btn-success mp-btn-table" data-toggle="modal" data-target="#NewDocumentModal">
                <i class="fa fa-plus-circle"></i> New Document
            </button>
            @Html.EJS().Grid("documents").DataSource(dataManager =>
            {
                dataManager.Url("/api/documents/personal/dataGrid/get/" + Model.Student.Person.Id).CrossDomain(false).Adaptor("UrlAdaptor");
            }).Columns(col =>
            {
                col.Field("Description").HeaderText("Description").Template("#docsDescriptionTemplate").Width("700").Add();
                col.Field("Date").HeaderText("Date").Template("#docsDateTemplate").Width("110").Add();
                col.HeaderText("Actions").Template("#logActionsTemplate").Width("170").Add();
            }).AllowPaging().EnableHover(false).PageSettings(page => page.PageSize(5)).GridLines(GridLine.Both).Render()

        </div>
    </div>
    <!--#endregion-->
    <!-- #region New Logs Form -->
    <div id="NewLogModal" class="modal fade" role="dialog">
        <div class="modal-dialog modal-lg" role="document">

            <!--content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">New Log - @Model.Student.Person.LastName, @Model.Student.Person.FirstName</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                @using (Ajax.BeginForm(null, null, new AjaxOptions { Url = "/api/logs/new", HttpMethod = "POST", OnSuccess = "newLogSuccess", OnFailure = "newLogFailure" }, new { id = "NewLogForm" }))
                {
                    <div class="modal-body">
                        <div class="form-group">
                            @Html.Label("Log Type")
                            @Html.DropDownListFor(l => l.Log.TypeId, new SelectList(Model.LogTypes, "Id", "Name"), "Select Log Type", new { @class = "form-control", Name = "TypeId" })
                            @Html.ValidationMessageFor(l => l.Log.TypeId)
                        </div>
                        <hr />
                        <button type="button" class="btn btn-sm btn-success" id="addComment"><i class="fa fa-plus-circle"></i> Add Comment</button>
                        <hr />
                        <div class="form-group">
                            @Html.Label("Message")
                            @Html.TextAreaFor(l => l.Log.Message, new { @class = "form-control mp-textarea-lg", Name = "Message", id = "newLogMessageControl" })
                            @Html.ValidationMessageFor(l => l.Log.Message)
                        </div>
                        <div class="form-group">
                            @Html.HiddenFor(l => l.Log.StudentId, new { Value = Model.Student.Id, Name = "StudentId" })
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
    <!--#endregion-->
    <!-- #region Edit Logs Form -->
    <div id="EditLogModal" class="modal fade" role="dialog">
        <div class="modal-dialog modal-lg">

            <!--content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">New Log - @Model.Student.Person.LastName, @Model.Student.Person.FirstName</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                @using (Ajax.BeginForm(null, null, new AjaxOptions { Url = "/api/logs/log/edit", HttpMethod = "POST", OnSuccess = "editLogSuccess", OnFailure = "editLogFailure" }, new { id = "EditLogForm" }))
                {
                    <div class="modal-body">
                        <div class="form-group">
                            @Html.Label("Log Type")
                            @Html.DropDownListFor(l => l.Log.TypeId, new SelectList(Model.LogTypes, "Id", "Name"), "Select Log Type", new { @class = "form-control", id = "EditLogTypeControl", Name = "TypeId" })
                        </div>
                        <div class="form-group">
                            @Html.Label("Message")
                            @Html.TextAreaFor(l => l.Log.Message, new { @class = "form-control mp-textarea-lg", id = "EditLogMessageControl", Name = "Message" })
                        </div>
                        <div class="form-group">
                            @Html.HiddenFor(l => l.Log.StudentId, new { Value = Model.Student.Id, Name = "StudentId" })
                            @Html.HiddenFor(l => l.Log.Id, new { Name = "Id", id = "EditLogIdControl" })
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                            <button type="submit" id="EditLogSave" class="btn btn-primary">Save</button>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
    <!--#endregion-->
    <!-- #region Edit Details Form -->
    <div id="EditDetailsModal" class="modal fade" role="dialog">
        <div class="modal-dialog">

            <!--content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Edit Details - @Model.Student.Person.LastName, @Model.Student.Person.FirstName</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                @using (Html.BeginForm("SaveStudent", "Staff"))
                {
                    <div class="modal-body">
                        <div class="form-group">
                            @Html.Label("First Name")
                            @Html.TextBoxFor(s => s.Student.Person.FirstName, new { @class = "form-control", Name = "FirstName", id = "editDetailsFirstNameControl" })
                            @Html.ValidationMessageFor(s => s.Student.Person.FirstName)
                        </div>
                        <div class="form-group">
                            @Html.Label("Last Name")
                            @Html.TextBoxFor(s => s.Student.Person.LastName, new { @class = "form-control", Name = "LastName", id = "editDetailsLastNameControl" })
                            @Html.ValidationMessageFor(s => s.Student.Person.LastName)
                        </div>
                        <div class="form-group">
                            @Html.Label("Gender")
                            @Html.DropDownListFor(s => s.Student.Person.Gender, new SelectList(Model.Genders, "Value", "Name"), "Select Gender", new { @class = "form-control", Name = "Gender", id = "editDetailsYearGroupControl" })
                            @Html.ValidationMessageFor(s => s.Student.Person.Gender)
                        </div>
                        <div class="form-group">
                            @Html.Label("Year Group")
                            @Html.DropDownListFor(s => s.Student.YearGroupId, new SelectList(Model.YearGroups, "Id", "Name"), "Select Year Group", new { @class = "form-control", Name = "YearGroupId", id = "editDetailsYearGroupControl" })
                            @Html.ValidationMessageFor(s => s.Student.YearGroupId)
                        </div>
                        <div class="form-group">
                            @Html.Label("Reg Group")
                            @Html.DropDownListFor(s => s.Student.RegGroupId, new SelectList(Model.RegGroups, "Id", "Name"), "Select Reg Group", new { @class = "form-control", Name = "RegGroupId", id = "editDetailsRegGroupControl" })
                            @Html.ValidationMessageFor(s => s.Student.RegGroupId)
                        </div>
                        @Html.HiddenFor(s => s.Student.Id, new { Name = "Id", id = "editDetailsIdControl" })
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
    <!--#endregion-->
    <!-- #region New Documents Form-->
    <div id="NewDocumentModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!--content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">New Document - @Model.Student.Person.LastName, @Model.Student.Person.FirstName</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                @using (Ajax.BeginForm(null, null, new AjaxOptions { Url = "/api/students/documents/add", HttpMethod = "POST", OnSuccess = "newDocumentSuccess", OnFailure = "newDocumentFailure" }, new { id = "newDocumentForm" }))
                {
                    <div class="modal-body">
                        <div class="form-group">
                            @Html.Label("Description")
                            @Html.TextBoxFor(x => x.Upload.Document.Description, new { @class = "form-control", Name = "Document.Description" })
                            @Html.ValidationMessageFor(x => x.Upload.Document.Description)
                        </div>
                        <div class="form-group">
                            @Html.Label("URL")
                            @Html.TextBoxFor(x => x.Upload.Document.Url, new { @class = "form-control", Name = "Document.Url" })
                            @Html.ValidationMessageFor(x => x.Upload.Document.Url)
                        </div>
                        <div class="form-group">
                            @Html.HiddenFor(x => x.Upload.PersonId, new { @class = "form-control", Value = Model.Student.Person.Id, Name = "Student" })
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <!--#endregion-->
    <!-- #region Edit Documents Form-->
    <div id="EditDocumentModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <!--content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Edit Document - @Model.Student.Person.LastName, @Model.Student.Person.FirstName</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                @using (Ajax.BeginForm(null, null, new AjaxOptions { Url = "/api/students/documents/edit", HttpMethod = "POST", OnSuccess = "editDocumentSuccess", OnFailure = "editDocumentFailure" }, new { id = "editDocumentForm" }))
                {
                    <div class="modal-body">
                        <div class="form-group">
                            @Html.Label("Description")
                            @Html.TextBoxFor(x => x.Upload.Document.Description, new { @class = "form-control", Name = "Description", id = "EditDocumentDescriptionControl" })
                            @Html.ValidationMessageFor(x => x.Upload.Document.Description)
                        </div>
                        <div class="form-group">
                            @Html.Label("URL")
                            @Html.TextBoxFor(x => x.Upload.Document.Url, new { @class = "form-control", Name = "Url", id = "EditDocumentUrlControl" })
                            @Html.ValidationMessageFor(x => x.Upload.Document.Url)
                        </div>
                        <div class="form-group">
                            @Html.HiddenFor(x => x.Upload.Document.Id, new { Name = "Id", id = "EditDocumentIdControl" })
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div id="AddCommentModal" class="modal fade" role="dialog">
        <div class="modal-dialog" role="document">

            <!--content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Add Comment to Log</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Comment Bank")
                        @Html.DropDownList("SelectedStatus", new SelectList(Model.CommentBanks, "Id", "Name"), "Select Comment Bank", new { @class = "form-control", Name = "Id", id = "selectedBank" })
                    </div>

                    <div class="container">
                        <table class="table table-bordered table-hover mp-table" id="comments">
                            <thead>
                                <tr>
                                    <th>Comment</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" data-dismiss="modal">Back</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--#endregion-->
</body>

@section scripts
{
    <script>
        //When Page Has Loaded, Prepare Scripts
        $(document).ready(function() {

            //---SCRIPT DEFINITIONS---

            overviewCalc();

            //Delete Log When Button Clicked
            $("#logs").on("click",
                ".js-delete",
                function() {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this log?",
                        function(result) {
                            if (result) {
                                $.ajax({
                                    url: "/api/logs/log/" + button.attr("data-log-id"),
                                    method: "DELETE",
                                    success: function(result) {
                                        refreshLogs();
                                        toastr.success(result);
                                    },
                                    error: function(result) {
                                        toastr.error(result.responseJSON);
                                    }
                                });
                            }
                        });
                });

            $("#documents").on("click",
                ".js-delete",
                function() {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this document?",
                        function(result) {
                            if (result) {
                                $.ajax({
                                    url: "/api/students/documents/remove/" + button.attr("data-document-id"),
                                    method: "DELETE",
                                    success: function(ajaxResult) {
                                        refreshDocs();
                                        toastr.success(ajaxResult);
                                    },
                                    error: function(ajaxResult) {
                                        toastr.error(ajaxResult.responseJSON);
                                    }
                                });
                            }
                        });
                });

            $('.modal').on('hidden.bs.modal',
                function() {
                    $(this).find('form').trigger('reset');
                });

            $("#AddCommentModal").on('hidden.bs.modal',
                function() {
                    $("#comments").DataTable().clear().destroy();
                    $("#selectedBank").prop("selectedIndex", 0);
                });

            $("#NewLogModal").on('hidden.bs.modal',
                function() {
                    $("#newLogMessageControl").val("");
                });

            $("#addComment").on("click",
                function() {
                    $("#AddCommentModal").modal('toggle');
                });

            $('#AddCommentModal').on('shown.bs.modal',
                function() {
                    loadComments();
                });

            $("#comments").on("click",
                ".js-add",
                function() {
                    var message = $(this).parent().siblings(":first").text();
                    $("#newLogMessageControl").val(function(i, val) {
                        return val + message;
                    });
                    toastr.success("Added comment to log");
                    $("#AddCommentModal").modal('hide');
                });

            $("#selectedBank").on("change",
                function() {
                    $("#comments").DataTable().clear().destroy();
                    loadComments();
                });

            //Open Form When Edit Log Button Clicked
            $("#logs").on("click",
                ".js-edit",
                function() {
                    var button = $(this);
                    var logId = button.attr("data-log-id");
                    $.ajax({
                        url: "/api/logs/log/" + logId,
                        method: "GET",
                        success: function(result) {
                            $("#EditLogTypeControl").val(result["typeId"]);
                            $("#EditLogMessageControl").val(result["message"]);
                            $("#EditLogIdControl").val(result["id"]);
                        },
                        error: function() {
                            toastr.error("Failed to load log data");
                        }
                    });
                    $("#EditLogModal").modal('toggle');
                });

            //Open Form When Edit Document Button Clicked
            $("#documents").on("click",
                ".js-edit",
                function() {
                    var button = $(this);
                    var docId = button.attr("data-document-id");
                    $.ajax({
                        url: "/api/students/documents/document/" + docId,
                        method: "GET",
                        success: function(result) {
                            $("#EditDocumentDescriptionControl").val(result["description"]);
                            $("#EditDocumentUrlControl").val(result["url"]);
                            $("#EditDocumentIdControl").val(result["id"]);
                        },
                        error: function() {
                            toastr.error("Failed to load document data");
                        }
                    });
                    $("#EditDocumentModal").modal('toggle');
                });


            $('#EditDetailsModal').on('hidden.bs.modal',
                function() {
                    $("#editDetailsFirstNameControl").val("@Model.Student.Person.FirstName");
                    $("#editDetailsLastNameControl").val("@Model.Student.Person.LastName");
                    $("#editDetailsYearGroupControl").val("@Model.Student.YearGroupId");
                    $("#editDetailsRegGroupControl").val("@Model.Student.RegGroupId");
                });

            //View Results
            $("#ViewResultsButton").on("click",
                function() {
                    var button = $(this);
                    location.replace("/Staff/People/Students/" + button.attr("data-student-id") + "/Results");
                });
        });

        function newDocumentSuccess(result) {
            $("#NewDocumentModal").modal('hide');
            refreshDocs();
            toastr.success(result);
        }

        function newDocumentFailure(result) {
            $("#NewDocumentModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function editDocumentSuccess(result) {
            $("#EditDocumentModal").modal('hide');
            refreshDocs();
            toastr.success(result);
        }

        function editDocumentFailure(result) {
            $("#EditDocumentModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function editLogSuccess(result) {
            $("#EditLogModal").modal('hide');
            refreshLogs();
            toastr.success(result);
        }

        function editLogFailure(result) {
            $("#EditLogModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function newLogSuccess(result) {
            $("#NewLogModal").modal('hide');
            refreshLogs();
            toastr.success(result);
        }

        function newLogFailure(result) {
            $("#NewLogModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function loadComments() {
            var commentBank = $("#selectedBank").val();

            if (commentBank === "") {
                $("#comments").hide();
                return;
            }

            var url = "/api/comments/byBank/" + commentBank;

            $("#comments").DataTable({
                ajax: {
                    url: url,
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "value",
                        render: function(data) {
                            return data.replace(/</g, "&lt;")
                                .replace(/>/g, "&gt;");
                        }
                    },
                    {
                        data: "id",
                        render: function(data) {
                            return "<button type='button' class='btn btn-xs btn-success js-add' data-comment-id=" +
                                data +
                                "><i class=\"fas fa-plus\"></i></button>";
                        }
                    }
                ],
                paging: true,
                ordering: false,
                searching: false,
                responsive: true,
                info: false,
                lengthChange: false,
                pageLength: 5,
                "language": {
                    "emptyTable": "No comments to display"
                }
            });

            $("#comments").show();
        }

        function overviewCalc() {

            //Attendance Block
            if ($("#attendanceDetail").attr("data-hasdata") === "true") {
                if (parseInt($("#attendanceDetail").text()) >= 95) {
                    $("#attendanceBlock").addClass("mp-background-success");
                }
                if (parseInt($("#attendanceDetail").text()) < 95) {
                    $("#attendanceBlock").addClass("mp-background-warning");
                }
                if (parseInt($("#attendanceDetail").text()) < 90) {
                    $("#attendanceBlock").removeClass("mp-background-warning");
                    $("#attendanceBlock").addClass("mp-background-danger");
                }
            }

            //Achievements Block
            if (parseInt($("#achievementDetail").text()) < @Model.BehaviourCount) {
                $("#achievementBlock").addClass("mp-background-danger");
            }
            if (parseInt($("#achievementDetail").text()) === @Model.BehaviourCount) {
                $("#achievementBlock").addClass("mp-background-warning");
            }
            if (parseInt($("#achievementDetail").text()) > @Model.BehaviourCount) {
                $("#achievementBlock").addClass("mp-background-success");
            }

            //Behaviour Block
            if (parseInt($("#behaviourDetail").text()) === 0) {
                $("#behaviourBlock").addClass("mp-background-success");
            }
            if (parseInt($("#behaviourDetail").text()) > 0) {
                $("#behaviourBlock").addClass("mp-background-warning");
            }
            if (parseInt($("#behaviourDetail").text()) > 9) {
                $("#behaviourBlock").removeClass("mp-background-warning");
                $("#behaviourBlock").addClass("mp-background-danger");
            }
        }

        function renderLogMessage(data) {
            if ("@Model.Student.Person.Gender" === "M") {
                return data.replace(/<name>/g, "@Model.Student.Person.FirstName")
                    .replace(/<he>/g, "he")
                    .replace(/<He>/g, "He")
                    .replace(/<him>/g, "him")
                    .replace(/<Him>/g, "Him")
                    .replace(/<his>/g, "his")
                    .replace(/<His>/g, "His")
                    .replace(/<himself>/g, "himself")
                    .replace(/<Himself>/g, "Himself")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/\n/g, "<br/>");
            }

            if ("@Model.Student.Person.Gender" === "F") {
                return data.replace("<name>", "@Model.Student.Person.FirstName")
                    .replace(/<he>/g, "she")
                    .replace(/<He>/g, "She")
                    .replace(/<him>/g, "her")
                    .replace(/<Him>/g, "Her")
                    .replace(/<his>/g, "her")
                    .replace(/<His>/g, "Her")
                    .replace(/<himself>/g, "herself")
                    .replace(/<Himself>/g, "Herself")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/\n/g, "<br/>");
            }

            if ("@Model.Student.Person.Gender" === "X") {
                return data.replace("<name>", "@Model.Student.Person.FirstName")
                    .replace(/<he>/g, "they")
                    .replace(/<He>/g, "They")
                    .replace(/<him>/g, "them")
                    .replace(/<Him>/g, "Them")
                    .replace(/<his>/g, "their")
                    .replace(/<His>/g, "Their")
                    .replace(/<himself>/g, "themselves")
                    .replace(/<Himself>/g, "Themselves")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/\n/g, "<br/>");
            }

            return data;
        }

        function logRowDataBound(args) {
            if (args.data['LogTypeName'] === "Academic Support") {
                args.row.classList.add("mp-log-academic-support");
            }
            if (args.data['LogTypeName'] === "Behaviour Log") {
                args.row.classList.add("mp-log-behaviour");
            }
            if (args.data['LogTypeName'] === "Report") {
                args.row.classList.add("mp-log-report");
            }
            if (args.data['LogTypeName'] === "Praise") {
                args.row.classList.add("mp-log-praise");
            }
            if (args.data['LogTypeName'] === "SEN Note") {
                args.row.classList.add("mp-log-sen");
            }
            if (args.data['LogTypeName'] === "Tutor Note") {
                args.row.classList.add("mp-log-tutor-note");
            }
            if (args.data['LogTypeName'] === "Medical Event") {
                args.row.classList.add("mp-log-medical-event");
            }
            if (args.data['LogTypeName'] === "Student Feed") {
                args.row.classList.add("mp-log-student-feed");
            }
        }

        function refreshLogs() {
            var grid = document.getElementById("logs").ej2_instances[0];
            grid.refresh();
        }

        function refreshDocs() {
            var grid = document.getElementById("documents").ej2_instances[0];
            grid.refresh();
        }

    </script>

    <script type="text/x-jsrender" id="logAuthorTemplate">
        <div>
            ${AuthorName}
        </div>
    </script>

    <script type="text/x-jsrender" id="logDateTemplate">
        <div>
            ${formatDate(Date.toString())}
        </div>
    </script>

    <script type="text/x-jsrender" id="logTypeTemplate">
        <div>
            ${LogTypeName}
        </div>
    </script>

    <script type="text/x-jsrender" id="logMessageTemplate">
        <div>
            <b>${renderLogMessage(Message.toString())}</b>
        </div>
    </script>

    <script type="text/x-jsrender" id="logActionsTemplate">
        <div>
            <button type="button" class="btn btn-xs btn-warning mp-btn-action js-edit" data-log-id="${Id}">
                <i class="far fa-edit"></i>
            </button>
            <button type="button" class="btn btn-xs btn-danger mp-btn-action js-delete" data-log-id="${Id}">
                <i class="far fa-trash-alt"></i>
            </button>
        </div>
    </script>

    <script type="text/x-jsrender" id="docsDescriptionTemplate">
        <div>
            <b><a href="${Url}" target="_blank">${Description}</a></b>
        </div>
    </script>


    <script type="text/x-jsrender" id="docsDateTemplate">
        <div>
            ${formatDate(Date.toString())}
        </div>
    </script>

    <script type="text/x-jsrender" id="docsActionsTemplate">
        <div>
            <button type="button" class="btn btn-xs btn-warning mp-btn-action js-edit" data-document-id="${Id}">
                <i class="far fa-edit"></i>
            </button>
            <button type="button" class="btn btn-xs btn-danger mp-btn-action js-delete" data-document-id="${Id}">
                <i class="far fa-trash-alt"></i>
            </button>
        </div>
    </script>

    @Scripts.Render("~/bundles/staff")
    @Scripts.Render("~/bundles/jqueryval")
}