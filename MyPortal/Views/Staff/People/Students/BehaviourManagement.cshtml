@using MyPortal.Processes
@using Syncfusion.EJ2.Grids
@model MyPortal.ViewModels.StudentBehaviourManagementViewModel
@{
    ViewBag.Title = "Behaviour Management";
    ViewBag.DisplayTitle = "Behaviour Management";
    Layout = "~/Views/Shared/_LayoutStaff.cshtml";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">@PeopleProcesses.GetStudentDisplayName(Model.Student)</h1>
</div>

<div class="row">
    
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Achievements</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                
                <div class="mb-4">
                    
                    <button type="button" class="btn btn-primary mp-btn-table" data-toggle="modal" data-target="#newAchievementModal">
                        <i class="fa fa-plus-circle"></i> New Achievement
                    </button>

                </div>

                @Html.EJS().Grid("achievements").DataSource(dataManager =>
                {
                    dataManager.Url(Url.HttpRouteUrl("ApiBehaviourGetAchievementsByStudentDataGrid", new {studentId = Model.Student.Id})).CrossDomain(false).Adaptor("UrlAdaptor");
                }).Columns(col =>
                {
                    col.Field("Date").HeaderText("Date").Template("#achievementsDateTemplate").Add();
                    col.Field("TypeName").HeaderText("Type").Template("#achievementsTypeTemplate").Add();
                    col.Field("Location").HeaderText("Location").Template("#achievementsLocationTemplate").Add();
                    col.Field("Points").HeaderText("Points").Template("#achievementsPointsTemplate").Add();
                    col.Field("RecordedBy").HeaderText("Recorded By").Template("#achievementsRecordedByTemplate").Add();
                    col.HeaderText("Actions").Template("#achievementsActionsTemplate").Width("170").Add();
                }).AllowPaging().PageSettings(page => page.PageSize(5)).EnableHover(false).GridLines(GridLine.Both).RowDataBound("achievementRowDataBound").Render()
            </div>
        </div>
    </div>
    
</div>

<div class="row">

    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Behaviour Incidents</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">

                <div class="mb-4">

                    <button type="button" class="btn btn-primary mp-btn-table" data-toggle="modal" data-target="#newAchievementModal">
                        <i class="fa fa-plus-circle"></i> New Incident
                    </button>

                </div>

                @Html.EJS().Grid("behaviour").DataSource(dataManager =>
                {
                    dataManager.Url(Url.HttpRouteUrl("ApiBehaviourGetBehaviourIncidentsByStudentDataGrid",  new {studentId = Model.Student.Id})).CrossDomain(false).Adaptor("UrlAdaptor");
                }).Columns(col =>
                {
                    col.Field("Date").HeaderText("Date").Template("#incidentsDateTemplate").Add();
                    col.Field("TypeName").HeaderText("Type").Template("#incidentsTypeTemplate").Add();
                    col.Field("Location").HeaderText("Location").Template("#incidentsLocationTemplate").Add();
                    col.Field("Points").HeaderText("Points").Template("#incidentsPointsTemplate").Add();
                    col.Field("RecordedBy").HeaderText("Recorded By").Template("#incidentsRecordedByTemplate").Add();
                    col.HeaderText("Actions").Template("#incidentsActionsTemplate").Width("170").Add();
                }).AllowPaging().PageSettings(page => page.PageSize(5)).EnableHover(false).GridLines(GridLine.Both).RowDataBound("incidentRowDataBound").Render()
            </div>
        </div>
    </div>

</div>

<div id="newAchievementModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">New Achievement</h4>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"></span>&times;</button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions { Url = Url.HttpRouteUrl("ApiBehaviourCreateAchievement", new {}), HttpMethod = "POST", OnSuccess = "newAchievementSuccess", OnFailure = "newAchievementFailure" }, new { id = "newAchievementForm" }))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Achievement Type")
                        @Html.DropDownListFor(l => l.Achievement.AchievementTypeId, new SelectList(Model.AchievementTypes, "Id", "Description"), "Select Type", new { @class = "form-control", Name = "AchievementTypeId" })
                        @Html.ValidationMessageFor(l => l.Achievement.AchievementTypeId)
                    </div>
                    <div class="form-group">
                        @Html.Label("Points")
                        @Html.TextBoxFor(x => x.Achievement.Points, new { @class = "form-control", Name = "Points", id = "newAchievementPointsControl", Value = "1" })
                        @Html.ValidationMessageFor(x => x.Achievement.Points)
                    </div>
                    <div class="form-group">
                        @Html.Label("Location")
                        @Html.DropDownListFor(l => l.Achievement.LocationId, new SelectList(Model.BehaviourLocations, "Id", "Description"), "Select Location", new { @class = "form-control", Name = "LocationId" })
                        @Html.ValidationMessageFor(l => l.Achievement.LocationId)
                    </div>
                    <div class="form-group">
                        @Html.Label("Comments")
                        @Html.TextAreaFor(x => x.Achievement.Comments, new { @class = "form-control", Name = "Comments" })
                        @Html.ValidationMessageFor(x => x.Achievement.Comments)
                    </div>
                    <div class="checkbox">
                        <label style="font-weight: bold;">
                            @Html.CheckBoxFor(x => x.Achievement.Resolved, new { Name = "Resolved" }) Resolved
                        </label>

                        @Html.HiddenFor(x => x.Achievement.StudentId, new { Value = Model.Student.Id, Name = "StudentId" })
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div id="editAchievementModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Achievement</h4>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"></span>&times;</button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions { Url = Url.HttpRouteUrl("ApiBehaviourUpdateAchievement", new {}), HttpMethod = "POST", OnSuccess = "editAchievementSuccess", OnFailure = "editAchievementFailure" }, new { id = "editAchievementForm" }))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Achievement Type")
                        @Html.DropDownListFor(l => l.Achievement.AchievementTypeId, new SelectList(Model.AchievementTypes, "Id", "Description"), "Select Type", new { @class = "form-control", Name = "AchievementTypeId", id = "editAchievementTypeControl" })
                        @Html.ValidationMessageFor(l => l.Achievement.AchievementTypeId)
                    </div>
                    <div class="form-group">
                        @Html.Label("Points")
                        @Html.TextBoxFor(x => x.Achievement.Points, new { @class = "form-control", Name = "Points", id = "editAchievementPointsControl" })
                        @Html.ValidationMessageFor(x => x.Achievement.Points)
                    </div>
                    <div class="form-group">
                        @Html.Label("Location")
                        @Html.DropDownListFor(l => l.Achievement.LocationId, new SelectList(Model.BehaviourLocations, "Id", "Description"), "Select Location", new { @class = "form-control", Name = "LocationId", id = "editAchievementLocationControl" })
                        @Html.ValidationMessageFor(l => l.Achievement.LocationId)
                    </div>
                    <div class="form-group">
                        @Html.Label("Comments")
                        @Html.TextAreaFor(x => x.Achievement.Comments, new { @class = "form-control", Name = "Comments", id = "editAchievementCommentsControl" })
                        @Html.ValidationMessageFor(x => x.Achievement.Comments)
                    </div>
                    <div class="checkbox">
                        <label style="font-weight: bold;">
                            @Html.CheckBoxFor(x => x.Achievement.Resolved, new { Name = "Resolved", id = "editAchievementResolvedControl" }) Resolved
                        </label>

                        @Html.HiddenFor(x => x.Achievement.Id, new { Name = "Id", id = "editAchievementIdControl" })
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div id="newIncidentModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">New Incident</h4>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"></span>&times;</button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions { Url = Url.HttpRouteUrl("ApiBehaviourCreateIncident", new {}), HttpMethod = "POST", OnSuccess = "newIncidentSuccess", OnFailure = "newIncidentFailure" }, new { id = "newIncidentForm" }))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Behaviour Type")
                        @Html.DropDownListFor(l => l.Incident.BehaviourTypeId, new SelectList(Model.BehaviourTypes, "Id", "Description"), "Select Type", new { @class = "form-control", Name = "BehaviourTypeId" })
                        @Html.ValidationMessageFor(l => l.Incident.BehaviourTypeId)
                    </div>
                    <div class="form-group">
                        @Html.Label("Points")
                        @Html.TextBoxFor(x => x.Incident.Points, new { @class = "form-control", Name = "Points", id = "newAchievementPointsControl", Value = "1" })
                        @Html.ValidationMessageFor(x => x.Incident.Points)
                    </div>
                    <div class="form-group">
                        @Html.Label("Location")
                        @Html.DropDownListFor(l => l.Incident.LocationId, new SelectList(Model.BehaviourLocations, "Id", "Description"), "Select Location", new { @class = "form-control", Name = "LocationId" })
                        @Html.ValidationMessageFor(l => l.Incident.LocationId)
                    </div>
                    <div class="form-group">
                        @Html.Label("Comments")
                        @Html.TextAreaFor(x => x.Incident.Comments, new { @class = "form-control", Name = "Comments" })
                        @Html.ValidationMessageFor(x => x.Incident.Comments)
                    </div>
                    <div class="checkbox">
                        <label style="font-weight: bold;">
                            @Html.CheckBoxFor(x => x.Incident.Resolved, new { Name = "Resolved" }) Resolved
                        </label>

                        @Html.HiddenFor(x => x.Incident.StudentId, new { Value = Model.Student.Id, Name = "StudentId" })
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div id="editIncidentModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Incident</h4>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"></span>&times;</button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions { Url = Url.HttpRouteUrl("ApiBehaviourUpdateIncident", new {}), HttpMethod = "POST", OnSuccess = "editIncidentSuccess", OnFailure = "editIncidentFailure" }, new { id = "editIncidentForm" }))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Achievement Type")
                        @Html.DropDownListFor(l => l.Incident.BehaviourTypeId, new SelectList(Model.BehaviourTypes, "Id", "Description"), "Select Type", new { @class = "form-control", Name = "BehaviourTypeId", id = "editBehaviourTypeControl" })
                        @Html.ValidationMessageFor(l => l.Incident.BehaviourTypeId)
                    </div>
                    <div class="form-group">
                        @Html.Label("Points")
                        @Html.TextBoxFor(x => x.Incident.Points, new { @class = "form-control", Name = "Points", id = "editBehaviourPointsControl" })
                        @Html.ValidationMessageFor(x => x.Incident.Points)
                    </div>
                    <div class="form-group">
                        @Html.Label("Location")
                        @Html.DropDownListFor(l => l.Incident.LocationId, new SelectList(Model.BehaviourLocations, "Id", "Description"), "Select Location", new { @class = "form-control", Name = "LocationId", id = "editBehaviourLocationControl" })
                        @Html.ValidationMessageFor(l => l.Incident.LocationId)
                    </div>
                    <div class="form-group">
                        @Html.Label("Comments")
                        @Html.TextAreaFor(x => x.Incident.Comments, new { @class = "form-control", Name = "Comments", id = "editBehaviourCommentsControl" })
                        @Html.ValidationMessageFor(x => x.Incident.Comments)
                    </div>
                    <div class="checkbox">
                        <label style="font-weight: bold;">
                            @Html.CheckBoxFor(x => x.Incident.Resolved, new { Name = "Resolved", id = "editIncidentResolvedControl" }) Resolved
                        </label>

                        @Html.HiddenFor(x => x.Incident.Id, new { Name = "Id", id = "editIncidentIdControl" })
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<button type="button" class="btn btn-primary mp-margin-top" data-student-id="@Model.Student.Id" id="backButton">Back</button>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>

        var urlGetAchievementById = "@Url.HttpRouteUrl("ApiBehaviourGetAchievementById", new {achievementId = "abcd"})";
        var urlGetIncidentById =
            "@Url.HttpRouteUrl("ApiBehaviourGetBehaviourIncidentById",  new {incidentId = "abcd"})";
        var urlDeleteAchievement = "@Url.HttpRouteUrl("ApiBehaviourDeleteAchievement", new {achievementId = "abcd"})";
        var urlDeleteIncident = "@Url.HttpRouteUrl("ApiBehaviourDeleteIncident", new {incidentId = "abcd"})";
        var urlStudentDetails = "@Url.HttpRouteUrl("PeopleStudentDetails", new {id = Model.Student.Id})";

        $(document).ready(function () {
            $('.modal').on('hidden.bs.modal',
                function () {
                    $(this).find('form').trigger('reset');
                });

            $("#achievements").on("click",
                ".js-edit",
                function () {
                    var button = $(this);
                    var achievementId = button.attr("data-ba-id");
                    $.ajax({
                        url: urlGetAchievementById.replace("abcd", achievementId),
                        method: "GET",
                        success: function (result) {
                            $("#editAchievementIdControl").val(result["id"]);
                            $("#editAchievementTypeControl").val(result["achievementTypeId"]);
                            $("#editAchievementPointsControl").val(result["points"]);
                            $("#editAchievementLocationControl").val(result["locationId"]);
                            $("#editAchievementCommentsControl").val(result["comments"]);
                            $("#editAchievementResolvedControl").attr("checked", result["resolved"]);
                        },
                        error: function () {
                            toastr.error("Failed to load achievement data");
                        }
                    });
                    $("#editAchievementModal").modal('toggle');
                });

            $("#behaviour").on("click",
                ".js-edit",
                function () {
                    var button = $(this);
                    var incidentId = button.attr("data-bi-id");
                    $.ajax({
                        url: urlGetIncidentById.replace("abcd", incidentId),
                        method: "GET",
                        success: function (result) {
                            $("#editBehaviourIdControl").val(result["id"]);
                            $("#editBehaviourTypeControl").val(result["behaviourTypeId"]);
                            $("#editBehaviourPointsControl").val(result["points"]);
                            $("#editBehaviourLocationControl").val(result["locationId"]);
                            $("#editBehaviourCommentsControl").val(result["comments"]);
                            $("#editBehaviourResolvedControl").attr("checked", result["resolved"]);
                        },
                        error: function () {
                            toastr.error("Failed to load incident data");
                        }
                    });
                    $("#editIncidentModal").modal('toggle');
                });

            $("#achievements").on("click",
                ".js-delete",
                function () {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this achievement?",
                        function (result) {
                            if (result) {
                                $.ajax({
                                    url: urlDeleteAchievement.replace("abcd", button.attr("data-ba-id")),
                                    method: "DELETE",
                                    success: function (ajaxResult) {
                                        refreshAchievements();
                                        toastr.success(ajaxResult);
                                    },
                                    error: function (ajaxResult) {
                                        toastr.error(ajaxResult.responseJSON);
                                    }
                                });
                            }
                        });
                });

            $("#behaviour").on("click",
                ".js-delete",
                function () {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this incident?",
                        function (result) {
                            if (result) {
                                $.ajax({
                                    url: urlDeleteIncident.replace("abcd", button.attr("data-bi-id")),
                                    method: "DELETE",
                                    success: function (ajaxResult) {
                                        refreshIncidents();
                                        toastr.success(ajaxResult);
                                    },
                                    error: function (ajaxResult) {
                                        toastr.error(ajaxResult.responseJSON);
                                    }
                                });
                            }
                        });
                });

            $("#backButton").on("click",
                function () {
                    location.replace(urlStudentDetails);
                });

        });

        function newAchievementSuccess(result) {
            $("#newAchievementModal").modal('hide');
            refreshAchievements();
            toastr.success(result);
        }

        function newAchievementFailure(result) {
            $("#newAchievementModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function newIncidentSuccess(result) {
            $("#newIncidentModal").modal('hide');
            refreshIncidents();
            toastr.success(result);
        }

        function newIncidentFailure(result) {
            $("#newIncidentModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function refreshAchievements() {
            var grid = document.getElementById("achievements").ej2_instances[0];
            grid.refresh();
        }

        function refreshIncidents() {
            var grid = document.getElementById("behaviour").ej2_instances[0];
            grid.refresh();
        }

        function achievementRowDataBound(args) {
        }

        function incidentRowDataBound(args) {
        }
    </script>

    <script type="text/x-jsrender" id="achievementsDateTemplate">
        <div>
            ${formatDate(Date.toString())}
        </div>
    </script>

    <script type="text/x-jsrender" id="achievementsTypeTemplate">
        <div>
            ${TypeName}
        </div>
    </script>

    <script type="text/x-jsrender" id="achievementsLocationTemplate">
        <div>
            ${Location}
        </div>
    </script>

    <script type="text/x-jsrender" id="achievementsPointsTemplate">
        <div>
            ${Points}
        </div>
    </script>

    <script type="text/x-jsrender" id="achievementsRecordedByTemplate">
        <div>
            ${RecordedBy}
        </div>
    </script>

    <script type="text/x-jsrender" id="achievementsCommentsTemplate">
        <div>
            <b>${Comments}</b>
        </div>
    </script>

    <script type="text/x-jsrender" id="achievementsActionsTemplate">
        <div>
            <button type="button" class="btn btn-xs btn-warning mp-btn-action js-edit" data-ba-id="${Id}">
                <i class="far fa-edit"></i>
            </button>
            <button type="button" class="btn btn-xs btn-danger mp-btn-action js-delete" data-ba-id="${Id}">
                <i class="far fa-trash-alt"></i>
            </button>
        </div>
    </script>

    <script type="text/x-jsrender" id="incidentsDateTemplate">
        <div>
            ${formatDate(Date.toString())}
        </div>
    </script>

    <script type="text/x-jsrender" id="incidentsTypeTemplate">
        <div>
            ${TypeName}
        </div>
    </script>

    <script type="text/x-jsrender" id="incidentsLocationTemplate">
        <div>
            ${Location}
        </div>
    </script>

    <script type="text/x-jsrender" id="incidentsPointsTemplate">
        <div>
            ${Points}
        </div>
    </script>

    <script type="text/x-jsrender" id="incidentsRecordedByTemplate">
        <div>
            ${RecordedBy}
        </div>
    </script>

    <script type="text/x-jsrender" id="incidentsCommentsTemplate">
        <div>
            <b>${Comments}</b>
        </div>
    </script>

    <script type="text/x-jsrender" id="incidentsActionsTemplate">
        <div>
            <button type="button" class="btn btn-xs btn-warning mp-btn-action js-edit" data-bi-id="${Id}">
                <i class="far fa-edit"></i>
            </button>
            <button type="button" class="btn btn-xs btn-danger mp-btn-action js-delete" data-bi-id="${Id}">
                <i class="far fa-trash-alt"></i>
            </button>
        </div>
    </script>
}

