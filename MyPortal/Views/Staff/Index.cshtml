@using MyPortal.Processes
@using Syncfusion.EJ2.Grids
@model MyPortal.ViewModels.StaffHomeViewModel
@{
    ViewBag.Title = "Home: " + Model.CurrentUser.Person.Title + " " + Model.CurrentUser.Person.FirstName.Substring(0, 1) + " " + Model.CurrentUser.Person.LastName;
    ViewBag.DisplayTitle = "Staff Home";
    ViewBag.Active = "Home";
    Layout = "~/Views/Shared/_LayoutStaff.cshtml";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">@PeopleProcesses.GetDisplayName(Model.CurrentUser).ResponseObject</h1>
</div>

@if (Model.SelectedAcademicYearId == 0)
{
    <div class="row">
        <div class="col-xl-12 col-md-12">
            <div class="alert alert-danger" role="alert">
                No academic years have been defined
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col mb-4">
        <button type="button" class="btn btn-primary mp-btn-top" data-toggle="modal" data-target="#ChangeAcademicYearModal">

            Academic Year

        </button>
    </div>
</div>

<div class="row">
    <div class="col-xl-3 col-lg-3">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">My Details</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                <table class="mp-table-condensed">
                    <tr>
                        <td>
                            <b>Title</b>
                        </td>
                        <td>@Model.CurrentUser.Person.Title</td>
                    </tr>
                    <tr>
                        <td>
                            <b>First Name</b>
                        </td>
                        <td>@Model.CurrentUser.Person.FirstName</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Last Name</b>
                        </td>
                        <td>@Model.CurrentUser.Person.LastName</td>
                    </tr>
                    <tr>
                        <td>
                            <b>Staff Code</b>
                        </td>
                        <td>@Model.CurrentUser.Code</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>

    <div class="col-xl-9 col-lg-9">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Bulletins</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Training</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                @Html.EJS().Grid("Training").DataSource(dataManager =>
                {
                    dataManager.Url("/api/personnel/certificates/get/byStaff/dataGrid/" + Model.CurrentUser.Id).CrossDomain(false).Adaptor("UrlAdaptor");
                }).Columns(col =>
                {
                    col.Field("CourseCode").HeaderText("Code").Template("#trainingCodeTemplate").Width("200").Add();
                    col.Field("CourseDescription").HeaderText("Description").Template("#trainingDescriptionTemplate").Width("300").Add();
                    col.Field("Status").HeaderText("Status").Template("#trainingStatusTemplate").Width("250").Add();
                }).AllowPaging().PageSettings(p => p.PageSize(5)).QueryCellInfo("trainingQuery").EnableHover(false).Render()
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Observations</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                @Html.EJS().Grid("Observations").DataSource(dataManager =>
                {
                    dataManager.Url("/api/personnel/observations/get/byStaff/dataGrid/" + Model.CurrentUser.Id).CrossDomain(false).Adaptor("UrlAdaptor");
                }).Columns(col =>
                {
                    col.Field("Date").HeaderText("Date").Template("#observationsDateTemplate").Width("250").Add();
                    col.Field("ObserverName").HeaderText("Observed By").Template("#observationsObserverTemplate").Width("300").Add();
                    col.Field("Outcome").HeaderText("Outcome").Template("#observationsOutcomeTemplate").Width("300").Add();
                }).AllowPaging().PageSettings(p => p.PageSize(5)).QueryCellInfo("observationQuery").EnableHover(false).Render()
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xl-12 col-lg-12">
        <div class="card shadow mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Documents</h6>
            </div>
            <!-- Card Body -->
            <div class="card-body">
                @Html.EJS().Grid("Documents").DataSource(dataManager =>
                {
                    dataManager.Url("/api/documents/personal/get/dataGrid/" + Model.CurrentUser.Person.Id).CrossDomain(false).Adaptor("UrlAdaptor");
                }).Columns(col =>
                {
                    col.Field("Description").HeaderText("Description").Template("#documentsDescriptionTemplate").Width("300").Add();
                    col.Field("Date").HeaderText("Date").Template("#documentsDateTemplate").Width("250").Add();
                }).AllowPaging().PageSettings(p => p.PageSize(5)).EnableHover(false).Render()
            </div>
        </div>
    </div>
</div>

<div id="ChangeAcademicYearModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Select Academic Year</h4>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true"></span>&times;</button>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions { Url = "/api/curriculum/academicYears/select", HttpMethod = "POST", OnSuccess = "selectYearSuccess", OnFailure = "selectYearFailure" }, new { id = "newLessonPlanForm" }))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.Label("Academic Year")
                        @Html.DropDownList("Id", new SelectList(Model.CurriculumAcademicYears, "Id", "Name", Model.SelectedAcademicYearId), new { @class = "form-control", id = "selectedYear" })
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section scripts
{
    <script>
        $(document).ready(function () {

        });

        function selectYearSuccess(result) {
            $("#ChangeAcademicYearModal").modal('hide');
            toastr.success(result);
            location.reload();
        }

        function selectYearFailure(result) {
            $("#ChangeAcademicYearModal").modal('hide');
            toastr.error(result.responseJSON);
        }

        function observationQuery(args) {
            if (args.column.field === "Outcome") {
                if (args.cell.textContent === "Outstanding") {
                    args.cell.classList.add("mp-observation-outstanding");
                }
                else if (args.cell.textContent === "Good") {
                    args.cell.classList.add("mp-observation-good");
                }
                else if (args.cell.textContent === "Satisfactory") {
                    args.cell.classList.add("mp-observation-satisfactory");
                }
                else if (args.cell.textContent === "Inadequate") {
                    args.cell.classList.add("mp-observation-inadequate");
                }
            }
        }

        function trainingQuery(args) {
            if (args.column.field === "Status") {
                if (args.cell.textContent === "Completed") {
                    args.cell.classList.add("mp-cert-completed");
                }
                else if (args.column.cell.textContent === "Pending") {
                    args.cell.classList.add("mp-cert-pending");
                }
                else if (args.column.cell.textContent === "Failed") {
                    args.cell.classList.add("mp-cert-failed");
                }
            }
        }
    </script>

    <script type="text/x-jsrender" id="documentsDescriptionTemplate">
        <div>
            ${Description}
        </div>
    </script>

    <script type="text/x-jsrender" id="documentsDateTemplate">
        <div>
            ${formatDate(Date.toString())}
        </div>
    </script>

    <script type="text/x-jsrender" id="observationsDateTemplate">
        <div>
            ${formatDate(Date.toString())}
        </div>
    </script>

    <script type="text/x-jsrender" id="observationsObserverTemplate">
        <div>
            ${ObserverName}
        </div>
    </script>

    <script type="text/x-jsrender" id="observationsOutcomeTemplate">
        <div>
            ${Outcome}
        </div>
    </script>

    <script type="text/x-jsrender" id="trainingCodeTemplate">
        <div>
            ${CourseCode}
        </div>
    </script>

    <script type="text/x-jsrender" id="trainingDescriptionTemplate">
        <div>
            ${CourseDescription}
        </div>
    </script>

    <script type="text/x-jsrender" id="trainingStatusTemplate">
        <div>
            ${Status}
        </div>
    </script>
}