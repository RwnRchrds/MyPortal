@model MyPortal.ViewModels.NewProductViewModel
@{
    ViewBag.Title = "Products";
    Layout = "~/Views/Shared/_LayoutFinance.cshtml";
}

<h2>Products</h2>
<hr/>

@if (User.IsInRole("Finance"))
{
    <button type="button" class="btn btn-success" style="margin-bottom: 8px;" data-toggle="modal" data-target="#NewProductModal">New Product</button>
    <br/>
}

<table class="table table-bordered table-hover" id="products">
    <thead>
    <tr>
        <th>Description</th>
        <th>Price</th>
        <th>On Store</th>
        <th>One Time</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody></tbody>
</table>

<div id="NewProductModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">New Product</h4>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = ""}, new {id = "newProductForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.LabelFor(x => x.Product.Description)
                        @Html.TextBoxFor(x => x.Product.Description, new {@class = "form-control", Name = "Description"})
                        @Html.ValidationMessageFor(x => x.Product.Description)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(x => x.Product.Price)
                        <div class="input-group">
                            <span class="input-group-addon" id="basic-addon" style="font-weight: bold;">£</span>
                            @Html.TextBoxFor(x => x.Product.Price, new {@class = "form-control", Name = "Price"})
                        </div>
                        @Html.ValidationMessageFor(x => x.Product.Price)
                    </div>
                    <div class="checkbox">
                        <label style="font-weight: bold;">
                            @Html.CheckBoxFor(x => x.Product.Visible, new {Name = "Visible"}) Available on Store
                        </label>
                    </div>
                    <div class="checkbox">
                        <label style="font-weight: bold;">
                            @Html.CheckBoxFor(x => x.Product.OnceOnly, new {Name = "OnceOnly"}) One-Time Purchase
                        </label>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>

<div id="EditProductModal" class="modal fade" role="dialog">
    <div class="modal-dialog">

        <!--content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Edit Product</h4>
            </div>
            @using (Ajax.BeginForm(null, null, new AjaxOptions {Url = ""}, new {id = "editProductForm"}))
            {
                <div class="modal-body">
                    <div class="form-group">
                        @Html.HiddenFor(x => x.Product.Id, new {Name = "Id", id = "editIdControl"})
                        @Html.LabelFor(x => x.Product.Description)
                        @Html.TextBoxFor(x => x.Product.Description, new {@class = "form-control", Name = "Description", id = "editDescriptionControl"})
                        @Html.ValidationMessageFor(x => x.Product.Description)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(x => x.Product.Price)
                        <div class="input-group">
                            <span class="input-group-addon" id="basic-addon" style="font-weight: bold;">£</span>
                            @Html.TextBoxFor(x => x.Product.Price, new {@class = "form-control", Name = "Price", id = "editPriceControl"})
                        </div>
                        @Html.ValidationMessageFor(x => x.Product.Price)
                    </div>
                    <div class="checkbox">
                        <label style="font-weight: bold;">
                            @Html.CheckBoxFor(x => x.Product.Visible, new {Name = "Visible", id = "editVisibleControl"}) Available on Store
                        </label>
                    </div>
                    <div class="checkbox">
                        <label style="font-weight: bold;">
                            @Html.CheckBoxFor(x => x.Product.OnceOnly, new {Name = "OnceOnly", id = "editOnceOnlyControl"}) One-Time Purchase
                        </label>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </div>
            }

        </div>
    </div>
</div>


@section scripts
{
    <script>
        $(document).ready(function() {

            function loadProducts() {

                var simpleCheckbox = function(data, type, full, meta) {
                    var isChecked = data === true ? "checked" : "";
                    return '<input type="checkbox" class="checkbox" onclick="return false;" ' +
                        isChecked +
                        ' />';
                };

                $("#products").DataTable({
                    ajax: {
                        url: "/api/products",
                        dataSrc: ""
                    },
                    columns: [
                        {
                            data: "description"
                        },
                        {
                            data: "price",
                            render: $.fn.dataTable.render.number(',', '.', 2, '£')
                        },
                        {
                            data: "visible",
                            render: simpleCheckbox
                        },
                        {
                            data: "onceOnly",
                            render: simpleCheckbox
                        },
                        {
                            data: "id",
                            render: function(data) {
                                return "<button type='button' class='btn btn-xs btn-warning js-edit' data-product-id=" +
                                    data +
                                    "><span class='glyphicon glyphicon-pencil' aria-hidden='true'></span></button> " +
                                    "<button type='button' class='btn btn-xs btn-danger js-delete' data-product-id=" +
                                    data +
                                    "><span class='glyphicon glyphicon-ban-circle' aria-hidden='true'></span></button>";
                            }
                        }
                    ],
                    "language": {
                        "emptyTable": "No products to display"
                    }

                });
            }

            //Delete Product When Button Clicked
            $("#products").on("click",
                ".js-delete",
                function() {
                    var button = $(this);
                    bootbox.confirm("Are you sure you wish to delete this product?",
                        function(result) {
                            if (result) {
                                $.ajax({
                                    url: "/api/products/" + button.attr("data-product-id"),
                                    method: "DELETE",
                                    success: function() {
                                        $("#products").DataTable().ajax.reload();
                                        toastr.success("Product deleted");
                                    },
                                    error: function() {
                                        toastr.error("Could not delete product");
                                    }
                                });
                            }
                        });
                });

            $("#newProductForm").on("submit",
                function(e) {

                    e.preventDefault();

                    var form = $("#newProductForm");
                    var data = form.serialize();

                    $.ajax({
                        url: "/api/products/new",
                        data: data,
                        method: "POST",
                        success: function(result) {
                            $("#NewProductModal").modal('hide');
                            toastr.success(result);
                            $("#products").DataTable().ajax.reload();
                        },
                        error: function(result) {
                            toastr.error(result.responseJSON);
                            form.reset();
                        }
                    });
                });

            $('#NewProductModal').on('hidden.bs.modal',
                function() {
                    $(this).find('form').trigger('reset');
                });

            $('#EditProductModal').on('hidden.bs.modal',
                function() {
                    $(this).find('form').trigger('reset');
                });

            //Open Form When Edit Product Button Clicked
            $("#products").on("click",
                ".js-edit",
                function() {
                    var button = $(this);
                    var logId = button.attr("data-product-id");
                    $.ajax({
                        url: "/api/products/" + logId,
                        method: "GET",
                        success: function(result) {
                            $("#editIdControl").val(result["id"]);
                            $("#editDescriptionControl").val(result["description"]);
                            $("#editPriceControl").val(result["price"]);
                            $("#editVisibleControl").attr("checked", (result["visible"]));
                            $("#editOnceOnlyControl").attr("checked", (result["onceOnly"]));
                        },
                        error: function(result) {
                            toastr.error(result.responseJSON);
                        }
                    });
                    $("#EditProductModal").modal('toggle');
                });

            //Edit Product Form Submit
            $("#editProductForm").on("submit",
                function(e) {

                    e.preventDefault();

                    $.ajax({
                        url: "/api/products/edit",
                        data: $("#editProductForm").serialize(),
                        method: "POST",
                        success: function(result) {
                            $("#EditProductModal").modal('hide');
                            toastr.success(result);
                            $("#products").DataTable().ajax.reload();
                        },
                        error: function(result) {
                            toastr.error(result.responseJSON);
                        }

                    });
                });

            loadProducts();
        });
    </script>
}